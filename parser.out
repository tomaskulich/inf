Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> file_input
Rule 1     file_input -> suite
Rule 2     block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT
Rule 3     block -> block_keyword fragment COLON suite
Rule 4     block -> block_keyword fragment COLON NEWLINE
Rule 5     block_keyword -> CLASS
Rule 6     block_keyword -> DEF
Rule 7     block_keyword -> IF
Rule 8     block_keyword -> ELIF
Rule 9     block_keyword -> ELSE
Rule 10    block_keyword -> TRY
Rule 11    block_keyword -> EXCEPT
Rule 12    block_keyword -> FINALLY
Rule 13    block_keyword -> WITH
Rule 14    block_keyword -> WHILE
Rule 15    block_keyword -> FOR
Rule 16    suite -> stmt
Rule 17    suite -> suite stmt
Rule 18    stmt -> fragment NEWLINE
Rule 19    stmt -> fragment ENDMARKER
Rule 20    stmt -> NEWLINE
Rule 21    stmt -> ENDMARKER
Rule 22    stmt -> block
Rule 23    fragment -> fragment LBRACE
Rule 24    fragment -> fragment RBRACE
Rule 25    fragment -> fragment STRING_END
Rule 26    fragment -> fragment STRING_CONTINUE
Rule 27    fragment -> fragment STRING
Rule 28    fragment -> fragment STRING_START_TRIPLE
Rule 29    fragment -> fragment WS
Rule 30    fragment -> fragment STRING_START_SINGLE
Rule 31    fragment -> fragment NUMBER
Rule 32    fragment -> fragment NAME
Rule 33    fragment -> fragment LPAR
Rule 34    fragment -> fragment RPAR
Rule 35    fragment -> fragment OPERATOR
Rule 36    fragment -> fragment LSQB
Rule 37    fragment -> fragment RSQB
Rule 38    fragment -> fragment COLON
Rule 39    fragment -> LBRACE
Rule 40    fragment -> RBRACE
Rule 41    fragment -> STRING_END
Rule 42    fragment -> STRING_CONTINUE
Rule 43    fragment -> STRING
Rule 44    fragment -> STRING_START_TRIPLE
Rule 45    fragment -> WS
Rule 46    fragment -> STRING_START_SINGLE
Rule 47    fragment -> NUMBER
Rule 48    fragment -> NAME
Rule 49    fragment -> LPAR
Rule 50    fragment -> RPAR
Rule 51    fragment -> LSQB
Rule 52    fragment -> RSQB
Rule 53    fragment -> COLON
Rule 54    fragment -> OPERATOR

Terminals, with rules where they appear

CLASS                : 5
COLON                : 2 3 4 38 53
DEDENT               : 2
DEF                  : 6
ELIF                 : 8
ELSE                 : 9
ENDMARKER            : 19 21
EXCEPT               : 11
FINALLY              : 12
FOR                  : 15
IF                   : 7
INDENT               : 2
LBRACE               : 23 39
LPAR                 : 33 49
LSQB                 : 36 51
NAME                 : 32 48
NEWLINE              : 2 4 18 20
NUMBER               : 31 47
OPERATOR             : 35 54
RBRACE               : 24 40
RPAR                 : 34 50
RSQB                 : 37 52
STRING               : 27 43
STRING_CONTINUE      : 26 42
STRING_END           : 25 41
STRING_START_SINGLE  : 30 46
STRING_START_TRIPLE  : 28 44
TRY                  : 10
WHILE                : 14
WITH                 : 13
WS                   : 29 45
error                : 

Nonterminals, with rules where they appear

block                : 22
block_keyword        : 2 3 4
file_input           : 0
fragment             : 2 3 4 18 19 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38
stmt                 : 16 17
suite                : 1 2 3 17

Parsing method: LALR

state 0

    (0) S' -> . file_input
    (1) file_input -> . suite
    (16) suite -> . stmt
    (17) suite -> . suite stmt
    (18) stmt -> . fragment NEWLINE
    (19) stmt -> . fragment ENDMARKER
    (20) stmt -> . NEWLINE
    (21) stmt -> . ENDMARKER
    (22) stmt -> . block
    (23) fragment -> . fragment LBRACE
    (24) fragment -> . fragment RBRACE
    (25) fragment -> . fragment STRING_END
    (26) fragment -> . fragment STRING_CONTINUE
    (27) fragment -> . fragment STRING
    (28) fragment -> . fragment STRING_START_TRIPLE
    (29) fragment -> . fragment WS
    (30) fragment -> . fragment STRING_START_SINGLE
    (31) fragment -> . fragment NUMBER
    (32) fragment -> . fragment NAME
    (33) fragment -> . fragment LPAR
    (34) fragment -> . fragment RPAR
    (35) fragment -> . fragment OPERATOR
    (36) fragment -> . fragment LSQB
    (37) fragment -> . fragment RSQB
    (38) fragment -> . fragment COLON
    (39) fragment -> . LBRACE
    (40) fragment -> . RBRACE
    (41) fragment -> . STRING_END
    (42) fragment -> . STRING_CONTINUE
    (43) fragment -> . STRING
    (44) fragment -> . STRING_START_TRIPLE
    (45) fragment -> . WS
    (46) fragment -> . STRING_START_SINGLE
    (47) fragment -> . NUMBER
    (48) fragment -> . NAME
    (49) fragment -> . LPAR
    (50) fragment -> . RPAR
    (51) fragment -> . LSQB
    (52) fragment -> . RSQB
    (53) fragment -> . COLON
    (54) fragment -> . OPERATOR
    (2) block -> . block_keyword fragment COLON NEWLINE INDENT suite DEDENT
    (3) block -> . block_keyword fragment COLON suite
    (4) block -> . block_keyword fragment COLON NEWLINE
    (5) block_keyword -> . CLASS
    (6) block_keyword -> . DEF
    (7) block_keyword -> . IF
    (8) block_keyword -> . ELIF
    (9) block_keyword -> . ELSE
    (10) block_keyword -> . TRY
    (11) block_keyword -> . EXCEPT
    (12) block_keyword -> . FINALLY
    (13) block_keyword -> . WITH
    (14) block_keyword -> . WHILE
    (15) block_keyword -> . FOR

    NEWLINE         shift and go to state 30
    ENDMARKER       shift and go to state 11
    LBRACE          shift and go to state 5
    RBRACE          shift and go to state 7
    STRING_END      shift and go to state 20
    STRING_CONTINUE shift and go to state 10
    STRING          shift and go to state 12
    STRING_START_TRIPLE shift and go to state 33
    WS              shift and go to state 13
    STRING_START_SINGLE shift and go to state 8
    NUMBER          shift and go to state 22
    NAME            shift and go to state 34
    LPAR            shift and go to state 2
    RPAR            shift and go to state 1
    LSQB            shift and go to state 19
    RSQB            shift and go to state 16
    COLON           shift and go to state 17
    OPERATOR        shift and go to state 29
    CLASS           shift and go to state 27
    DEF             shift and go to state 31
    IF              shift and go to state 14
    ELIF            shift and go to state 28
    ELSE            shift and go to state 21
    TRY             shift and go to state 6
    EXCEPT          shift and go to state 3
    FINALLY         shift and go to state 23
    WITH            shift and go to state 25
    WHILE           shift and go to state 35
    FOR             shift and go to state 32

    suite                          shift and go to state 9
    fragment                       shift and go to state 24
    block_keyword                  shift and go to state 4
    stmt                           shift and go to state 15
    block                          shift and go to state 26
    file_input                     shift and go to state 18

state 1

    (50) fragment -> RPAR .

    NEWLINE         reduce using rule 50 (fragment -> RPAR .)
    ENDMARKER       reduce using rule 50 (fragment -> RPAR .)
    LBRACE          reduce using rule 50 (fragment -> RPAR .)
    RBRACE          reduce using rule 50 (fragment -> RPAR .)
    STRING_END      reduce using rule 50 (fragment -> RPAR .)
    STRING_CONTINUE reduce using rule 50 (fragment -> RPAR .)
    STRING          reduce using rule 50 (fragment -> RPAR .)
    STRING_START_TRIPLE reduce using rule 50 (fragment -> RPAR .)
    WS              reduce using rule 50 (fragment -> RPAR .)
    STRING_START_SINGLE reduce using rule 50 (fragment -> RPAR .)
    NUMBER          reduce using rule 50 (fragment -> RPAR .)
    NAME            reduce using rule 50 (fragment -> RPAR .)
    LPAR            reduce using rule 50 (fragment -> RPAR .)
    RPAR            reduce using rule 50 (fragment -> RPAR .)
    OPERATOR        reduce using rule 50 (fragment -> RPAR .)
    LSQB            reduce using rule 50 (fragment -> RPAR .)
    RSQB            reduce using rule 50 (fragment -> RPAR .)
    COLON           reduce using rule 50 (fragment -> RPAR .)


state 2

    (49) fragment -> LPAR .

    NEWLINE         reduce using rule 49 (fragment -> LPAR .)
    ENDMARKER       reduce using rule 49 (fragment -> LPAR .)
    LBRACE          reduce using rule 49 (fragment -> LPAR .)
    RBRACE          reduce using rule 49 (fragment -> LPAR .)
    STRING_END      reduce using rule 49 (fragment -> LPAR .)
    STRING_CONTINUE reduce using rule 49 (fragment -> LPAR .)
    STRING          reduce using rule 49 (fragment -> LPAR .)
    STRING_START_TRIPLE reduce using rule 49 (fragment -> LPAR .)
    WS              reduce using rule 49 (fragment -> LPAR .)
    STRING_START_SINGLE reduce using rule 49 (fragment -> LPAR .)
    NUMBER          reduce using rule 49 (fragment -> LPAR .)
    NAME            reduce using rule 49 (fragment -> LPAR .)
    LPAR            reduce using rule 49 (fragment -> LPAR .)
    RPAR            reduce using rule 49 (fragment -> LPAR .)
    OPERATOR        reduce using rule 49 (fragment -> LPAR .)
    LSQB            reduce using rule 49 (fragment -> LPAR .)
    RSQB            reduce using rule 49 (fragment -> LPAR .)
    COLON           reduce using rule 49 (fragment -> LPAR .)


state 3

    (11) block_keyword -> EXCEPT .

    LBRACE          reduce using rule 11 (block_keyword -> EXCEPT .)
    RBRACE          reduce using rule 11 (block_keyword -> EXCEPT .)
    STRING_END      reduce using rule 11 (block_keyword -> EXCEPT .)
    STRING_CONTINUE reduce using rule 11 (block_keyword -> EXCEPT .)
    STRING          reduce using rule 11 (block_keyword -> EXCEPT .)
    STRING_START_TRIPLE reduce using rule 11 (block_keyword -> EXCEPT .)
    WS              reduce using rule 11 (block_keyword -> EXCEPT .)
    STRING_START_SINGLE reduce using rule 11 (block_keyword -> EXCEPT .)
    NUMBER          reduce using rule 11 (block_keyword -> EXCEPT .)
    NAME            reduce using rule 11 (block_keyword -> EXCEPT .)
    LPAR            reduce using rule 11 (block_keyword -> EXCEPT .)
    RPAR            reduce using rule 11 (block_keyword -> EXCEPT .)
    LSQB            reduce using rule 11 (block_keyword -> EXCEPT .)
    RSQB            reduce using rule 11 (block_keyword -> EXCEPT .)
    COLON           reduce using rule 11 (block_keyword -> EXCEPT .)
    OPERATOR        reduce using rule 11 (block_keyword -> EXCEPT .)


state 4

    (2) block -> block_keyword . fragment COLON NEWLINE INDENT suite DEDENT
    (3) block -> block_keyword . fragment COLON suite
    (4) block -> block_keyword . fragment COLON NEWLINE
    (23) fragment -> . fragment LBRACE
    (24) fragment -> . fragment RBRACE
    (25) fragment -> . fragment STRING_END
    (26) fragment -> . fragment STRING_CONTINUE
    (27) fragment -> . fragment STRING
    (28) fragment -> . fragment STRING_START_TRIPLE
    (29) fragment -> . fragment WS
    (30) fragment -> . fragment STRING_START_SINGLE
    (31) fragment -> . fragment NUMBER
    (32) fragment -> . fragment NAME
    (33) fragment -> . fragment LPAR
    (34) fragment -> . fragment RPAR
    (35) fragment -> . fragment OPERATOR
    (36) fragment -> . fragment LSQB
    (37) fragment -> . fragment RSQB
    (38) fragment -> . fragment COLON
    (39) fragment -> . LBRACE
    (40) fragment -> . RBRACE
    (41) fragment -> . STRING_END
    (42) fragment -> . STRING_CONTINUE
    (43) fragment -> . STRING
    (44) fragment -> . STRING_START_TRIPLE
    (45) fragment -> . WS
    (46) fragment -> . STRING_START_SINGLE
    (47) fragment -> . NUMBER
    (48) fragment -> . NAME
    (49) fragment -> . LPAR
    (50) fragment -> . RPAR
    (51) fragment -> . LSQB
    (52) fragment -> . RSQB
    (53) fragment -> . COLON
    (54) fragment -> . OPERATOR

    LBRACE          shift and go to state 5
    RBRACE          shift and go to state 7
    STRING_END      shift and go to state 20
    STRING_CONTINUE shift and go to state 10
    STRING          shift and go to state 12
    STRING_START_TRIPLE shift and go to state 33
    WS              shift and go to state 13
    STRING_START_SINGLE shift and go to state 8
    NUMBER          shift and go to state 22
    NAME            shift and go to state 34
    LPAR            shift and go to state 2
    RPAR            shift and go to state 1
    LSQB            shift and go to state 19
    RSQB            shift and go to state 16
    COLON           shift and go to state 17
    OPERATOR        shift and go to state 29

    fragment                       shift and go to state 36

state 5

    (39) fragment -> LBRACE .

    NEWLINE         reduce using rule 39 (fragment -> LBRACE .)
    ENDMARKER       reduce using rule 39 (fragment -> LBRACE .)
    LBRACE          reduce using rule 39 (fragment -> LBRACE .)
    RBRACE          reduce using rule 39 (fragment -> LBRACE .)
    STRING_END      reduce using rule 39 (fragment -> LBRACE .)
    STRING_CONTINUE reduce using rule 39 (fragment -> LBRACE .)
    STRING          reduce using rule 39 (fragment -> LBRACE .)
    STRING_START_TRIPLE reduce using rule 39 (fragment -> LBRACE .)
    WS              reduce using rule 39 (fragment -> LBRACE .)
    STRING_START_SINGLE reduce using rule 39 (fragment -> LBRACE .)
    NUMBER          reduce using rule 39 (fragment -> LBRACE .)
    NAME            reduce using rule 39 (fragment -> LBRACE .)
    LPAR            reduce using rule 39 (fragment -> LBRACE .)
    RPAR            reduce using rule 39 (fragment -> LBRACE .)
    OPERATOR        reduce using rule 39 (fragment -> LBRACE .)
    LSQB            reduce using rule 39 (fragment -> LBRACE .)
    RSQB            reduce using rule 39 (fragment -> LBRACE .)
    COLON           reduce using rule 39 (fragment -> LBRACE .)


state 6

    (10) block_keyword -> TRY .

    LBRACE          reduce using rule 10 (block_keyword -> TRY .)
    RBRACE          reduce using rule 10 (block_keyword -> TRY .)
    STRING_END      reduce using rule 10 (block_keyword -> TRY .)
    STRING_CONTINUE reduce using rule 10 (block_keyword -> TRY .)
    STRING          reduce using rule 10 (block_keyword -> TRY .)
    STRING_START_TRIPLE reduce using rule 10 (block_keyword -> TRY .)
    WS              reduce using rule 10 (block_keyword -> TRY .)
    STRING_START_SINGLE reduce using rule 10 (block_keyword -> TRY .)
    NUMBER          reduce using rule 10 (block_keyword -> TRY .)
    NAME            reduce using rule 10 (block_keyword -> TRY .)
    LPAR            reduce using rule 10 (block_keyword -> TRY .)
    RPAR            reduce using rule 10 (block_keyword -> TRY .)
    LSQB            reduce using rule 10 (block_keyword -> TRY .)
    RSQB            reduce using rule 10 (block_keyword -> TRY .)
    COLON           reduce using rule 10 (block_keyword -> TRY .)
    OPERATOR        reduce using rule 10 (block_keyword -> TRY .)


state 7

    (40) fragment -> RBRACE .

    NEWLINE         reduce using rule 40 (fragment -> RBRACE .)
    ENDMARKER       reduce using rule 40 (fragment -> RBRACE .)
    LBRACE          reduce using rule 40 (fragment -> RBRACE .)
    RBRACE          reduce using rule 40 (fragment -> RBRACE .)
    STRING_END      reduce using rule 40 (fragment -> RBRACE .)
    STRING_CONTINUE reduce using rule 40 (fragment -> RBRACE .)
    STRING          reduce using rule 40 (fragment -> RBRACE .)
    STRING_START_TRIPLE reduce using rule 40 (fragment -> RBRACE .)
    WS              reduce using rule 40 (fragment -> RBRACE .)
    STRING_START_SINGLE reduce using rule 40 (fragment -> RBRACE .)
    NUMBER          reduce using rule 40 (fragment -> RBRACE .)
    NAME            reduce using rule 40 (fragment -> RBRACE .)
    LPAR            reduce using rule 40 (fragment -> RBRACE .)
    RPAR            reduce using rule 40 (fragment -> RBRACE .)
    OPERATOR        reduce using rule 40 (fragment -> RBRACE .)
    LSQB            reduce using rule 40 (fragment -> RBRACE .)
    RSQB            reduce using rule 40 (fragment -> RBRACE .)
    COLON           reduce using rule 40 (fragment -> RBRACE .)


state 8

    (46) fragment -> STRING_START_SINGLE .

    NEWLINE         reduce using rule 46 (fragment -> STRING_START_SINGLE .)
    ENDMARKER       reduce using rule 46 (fragment -> STRING_START_SINGLE .)
    LBRACE          reduce using rule 46 (fragment -> STRING_START_SINGLE .)
    RBRACE          reduce using rule 46 (fragment -> STRING_START_SINGLE .)
    STRING_END      reduce using rule 46 (fragment -> STRING_START_SINGLE .)
    STRING_CONTINUE reduce using rule 46 (fragment -> STRING_START_SINGLE .)
    STRING          reduce using rule 46 (fragment -> STRING_START_SINGLE .)
    STRING_START_TRIPLE reduce using rule 46 (fragment -> STRING_START_SINGLE .)
    WS              reduce using rule 46 (fragment -> STRING_START_SINGLE .)
    STRING_START_SINGLE reduce using rule 46 (fragment -> STRING_START_SINGLE .)
    NUMBER          reduce using rule 46 (fragment -> STRING_START_SINGLE .)
    NAME            reduce using rule 46 (fragment -> STRING_START_SINGLE .)
    LPAR            reduce using rule 46 (fragment -> STRING_START_SINGLE .)
    RPAR            reduce using rule 46 (fragment -> STRING_START_SINGLE .)
    OPERATOR        reduce using rule 46 (fragment -> STRING_START_SINGLE .)
    LSQB            reduce using rule 46 (fragment -> STRING_START_SINGLE .)
    RSQB            reduce using rule 46 (fragment -> STRING_START_SINGLE .)
    COLON           reduce using rule 46 (fragment -> STRING_START_SINGLE .)


state 9

    (1) file_input -> suite .
    (17) suite -> suite . stmt
    (18) stmt -> . fragment NEWLINE
    (19) stmt -> . fragment ENDMARKER
    (20) stmt -> . NEWLINE
    (21) stmt -> . ENDMARKER
    (22) stmt -> . block
    (23) fragment -> . fragment LBRACE
    (24) fragment -> . fragment RBRACE
    (25) fragment -> . fragment STRING_END
    (26) fragment -> . fragment STRING_CONTINUE
    (27) fragment -> . fragment STRING
    (28) fragment -> . fragment STRING_START_TRIPLE
    (29) fragment -> . fragment WS
    (30) fragment -> . fragment STRING_START_SINGLE
    (31) fragment -> . fragment NUMBER
    (32) fragment -> . fragment NAME
    (33) fragment -> . fragment LPAR
    (34) fragment -> . fragment RPAR
    (35) fragment -> . fragment OPERATOR
    (36) fragment -> . fragment LSQB
    (37) fragment -> . fragment RSQB
    (38) fragment -> . fragment COLON
    (39) fragment -> . LBRACE
    (40) fragment -> . RBRACE
    (41) fragment -> . STRING_END
    (42) fragment -> . STRING_CONTINUE
    (43) fragment -> . STRING
    (44) fragment -> . STRING_START_TRIPLE
    (45) fragment -> . WS
    (46) fragment -> . STRING_START_SINGLE
    (47) fragment -> . NUMBER
    (48) fragment -> . NAME
    (49) fragment -> . LPAR
    (50) fragment -> . RPAR
    (51) fragment -> . LSQB
    (52) fragment -> . RSQB
    (53) fragment -> . COLON
    (54) fragment -> . OPERATOR
    (2) block -> . block_keyword fragment COLON NEWLINE INDENT suite DEDENT
    (3) block -> . block_keyword fragment COLON suite
    (4) block -> . block_keyword fragment COLON NEWLINE
    (5) block_keyword -> . CLASS
    (6) block_keyword -> . DEF
    (7) block_keyword -> . IF
    (8) block_keyword -> . ELIF
    (9) block_keyword -> . ELSE
    (10) block_keyword -> . TRY
    (11) block_keyword -> . EXCEPT
    (12) block_keyword -> . FINALLY
    (13) block_keyword -> . WITH
    (14) block_keyword -> . WHILE
    (15) block_keyword -> . FOR

    $end            reduce using rule 1 (file_input -> suite .)
    NEWLINE         shift and go to state 30
    ENDMARKER       shift and go to state 11
    LBRACE          shift and go to state 5
    RBRACE          shift and go to state 7
    STRING_END      shift and go to state 20
    STRING_CONTINUE shift and go to state 10
    STRING          shift and go to state 12
    STRING_START_TRIPLE shift and go to state 33
    WS              shift and go to state 13
    STRING_START_SINGLE shift and go to state 8
    NUMBER          shift and go to state 22
    NAME            shift and go to state 34
    LPAR            shift and go to state 2
    RPAR            shift and go to state 1
    LSQB            shift and go to state 19
    RSQB            shift and go to state 16
    COLON           shift and go to state 17
    OPERATOR        shift and go to state 29
    CLASS           shift and go to state 27
    DEF             shift and go to state 31
    IF              shift and go to state 14
    ELIF            shift and go to state 28
    ELSE            shift and go to state 21
    TRY             shift and go to state 6
    EXCEPT          shift and go to state 3
    FINALLY         shift and go to state 23
    WITH            shift and go to state 25
    WHILE           shift and go to state 35
    FOR             shift and go to state 32

    stmt                           shift and go to state 37
    fragment                       shift and go to state 24
    block                          shift and go to state 26
    block_keyword                  shift and go to state 4

state 10

    (42) fragment -> STRING_CONTINUE .

    NEWLINE         reduce using rule 42 (fragment -> STRING_CONTINUE .)
    ENDMARKER       reduce using rule 42 (fragment -> STRING_CONTINUE .)
    LBRACE          reduce using rule 42 (fragment -> STRING_CONTINUE .)
    RBRACE          reduce using rule 42 (fragment -> STRING_CONTINUE .)
    STRING_END      reduce using rule 42 (fragment -> STRING_CONTINUE .)
    STRING_CONTINUE reduce using rule 42 (fragment -> STRING_CONTINUE .)
    STRING          reduce using rule 42 (fragment -> STRING_CONTINUE .)
    STRING_START_TRIPLE reduce using rule 42 (fragment -> STRING_CONTINUE .)
    WS              reduce using rule 42 (fragment -> STRING_CONTINUE .)
    STRING_START_SINGLE reduce using rule 42 (fragment -> STRING_CONTINUE .)
    NUMBER          reduce using rule 42 (fragment -> STRING_CONTINUE .)
    NAME            reduce using rule 42 (fragment -> STRING_CONTINUE .)
    LPAR            reduce using rule 42 (fragment -> STRING_CONTINUE .)
    RPAR            reduce using rule 42 (fragment -> STRING_CONTINUE .)
    OPERATOR        reduce using rule 42 (fragment -> STRING_CONTINUE .)
    LSQB            reduce using rule 42 (fragment -> STRING_CONTINUE .)
    RSQB            reduce using rule 42 (fragment -> STRING_CONTINUE .)
    COLON           reduce using rule 42 (fragment -> STRING_CONTINUE .)


state 11

    (21) stmt -> ENDMARKER .

    NEWLINE         reduce using rule 21 (stmt -> ENDMARKER .)
    ENDMARKER       reduce using rule 21 (stmt -> ENDMARKER .)
    LBRACE          reduce using rule 21 (stmt -> ENDMARKER .)
    RBRACE          reduce using rule 21 (stmt -> ENDMARKER .)
    STRING_END      reduce using rule 21 (stmt -> ENDMARKER .)
    STRING_CONTINUE reduce using rule 21 (stmt -> ENDMARKER .)
    STRING          reduce using rule 21 (stmt -> ENDMARKER .)
    STRING_START_TRIPLE reduce using rule 21 (stmt -> ENDMARKER .)
    WS              reduce using rule 21 (stmt -> ENDMARKER .)
    STRING_START_SINGLE reduce using rule 21 (stmt -> ENDMARKER .)
    NUMBER          reduce using rule 21 (stmt -> ENDMARKER .)
    NAME            reduce using rule 21 (stmt -> ENDMARKER .)
    LPAR            reduce using rule 21 (stmt -> ENDMARKER .)
    RPAR            reduce using rule 21 (stmt -> ENDMARKER .)
    LSQB            reduce using rule 21 (stmt -> ENDMARKER .)
    RSQB            reduce using rule 21 (stmt -> ENDMARKER .)
    COLON           reduce using rule 21 (stmt -> ENDMARKER .)
    OPERATOR        reduce using rule 21 (stmt -> ENDMARKER .)
    CLASS           reduce using rule 21 (stmt -> ENDMARKER .)
    DEF             reduce using rule 21 (stmt -> ENDMARKER .)
    IF              reduce using rule 21 (stmt -> ENDMARKER .)
    ELIF            reduce using rule 21 (stmt -> ENDMARKER .)
    ELSE            reduce using rule 21 (stmt -> ENDMARKER .)
    TRY             reduce using rule 21 (stmt -> ENDMARKER .)
    EXCEPT          reduce using rule 21 (stmt -> ENDMARKER .)
    FINALLY         reduce using rule 21 (stmt -> ENDMARKER .)
    WITH            reduce using rule 21 (stmt -> ENDMARKER .)
    WHILE           reduce using rule 21 (stmt -> ENDMARKER .)
    FOR             reduce using rule 21 (stmt -> ENDMARKER .)
    $end            reduce using rule 21 (stmt -> ENDMARKER .)
    DEDENT          reduce using rule 21 (stmt -> ENDMARKER .)


state 12

    (43) fragment -> STRING .

    NEWLINE         reduce using rule 43 (fragment -> STRING .)
    ENDMARKER       reduce using rule 43 (fragment -> STRING .)
    LBRACE          reduce using rule 43 (fragment -> STRING .)
    RBRACE          reduce using rule 43 (fragment -> STRING .)
    STRING_END      reduce using rule 43 (fragment -> STRING .)
    STRING_CONTINUE reduce using rule 43 (fragment -> STRING .)
    STRING          reduce using rule 43 (fragment -> STRING .)
    STRING_START_TRIPLE reduce using rule 43 (fragment -> STRING .)
    WS              reduce using rule 43 (fragment -> STRING .)
    STRING_START_SINGLE reduce using rule 43 (fragment -> STRING .)
    NUMBER          reduce using rule 43 (fragment -> STRING .)
    NAME            reduce using rule 43 (fragment -> STRING .)
    LPAR            reduce using rule 43 (fragment -> STRING .)
    RPAR            reduce using rule 43 (fragment -> STRING .)
    OPERATOR        reduce using rule 43 (fragment -> STRING .)
    LSQB            reduce using rule 43 (fragment -> STRING .)
    RSQB            reduce using rule 43 (fragment -> STRING .)
    COLON           reduce using rule 43 (fragment -> STRING .)


state 13

    (45) fragment -> WS .

    NEWLINE         reduce using rule 45 (fragment -> WS .)
    ENDMARKER       reduce using rule 45 (fragment -> WS .)
    LBRACE          reduce using rule 45 (fragment -> WS .)
    RBRACE          reduce using rule 45 (fragment -> WS .)
    STRING_END      reduce using rule 45 (fragment -> WS .)
    STRING_CONTINUE reduce using rule 45 (fragment -> WS .)
    STRING          reduce using rule 45 (fragment -> WS .)
    STRING_START_TRIPLE reduce using rule 45 (fragment -> WS .)
    WS              reduce using rule 45 (fragment -> WS .)
    STRING_START_SINGLE reduce using rule 45 (fragment -> WS .)
    NUMBER          reduce using rule 45 (fragment -> WS .)
    NAME            reduce using rule 45 (fragment -> WS .)
    LPAR            reduce using rule 45 (fragment -> WS .)
    RPAR            reduce using rule 45 (fragment -> WS .)
    OPERATOR        reduce using rule 45 (fragment -> WS .)
    LSQB            reduce using rule 45 (fragment -> WS .)
    RSQB            reduce using rule 45 (fragment -> WS .)
    COLON           reduce using rule 45 (fragment -> WS .)


state 14

    (7) block_keyword -> IF .

    LBRACE          reduce using rule 7 (block_keyword -> IF .)
    RBRACE          reduce using rule 7 (block_keyword -> IF .)
    STRING_END      reduce using rule 7 (block_keyword -> IF .)
    STRING_CONTINUE reduce using rule 7 (block_keyword -> IF .)
    STRING          reduce using rule 7 (block_keyword -> IF .)
    STRING_START_TRIPLE reduce using rule 7 (block_keyword -> IF .)
    WS              reduce using rule 7 (block_keyword -> IF .)
    STRING_START_SINGLE reduce using rule 7 (block_keyword -> IF .)
    NUMBER          reduce using rule 7 (block_keyword -> IF .)
    NAME            reduce using rule 7 (block_keyword -> IF .)
    LPAR            reduce using rule 7 (block_keyword -> IF .)
    RPAR            reduce using rule 7 (block_keyword -> IF .)
    LSQB            reduce using rule 7 (block_keyword -> IF .)
    RSQB            reduce using rule 7 (block_keyword -> IF .)
    COLON           reduce using rule 7 (block_keyword -> IF .)
    OPERATOR        reduce using rule 7 (block_keyword -> IF .)


state 15

    (16) suite -> stmt .

    NEWLINE         reduce using rule 16 (suite -> stmt .)
    ENDMARKER       reduce using rule 16 (suite -> stmt .)
    LBRACE          reduce using rule 16 (suite -> stmt .)
    RBRACE          reduce using rule 16 (suite -> stmt .)
    STRING_END      reduce using rule 16 (suite -> stmt .)
    STRING_CONTINUE reduce using rule 16 (suite -> stmt .)
    STRING          reduce using rule 16 (suite -> stmt .)
    STRING_START_TRIPLE reduce using rule 16 (suite -> stmt .)
    WS              reduce using rule 16 (suite -> stmt .)
    STRING_START_SINGLE reduce using rule 16 (suite -> stmt .)
    NUMBER          reduce using rule 16 (suite -> stmt .)
    NAME            reduce using rule 16 (suite -> stmt .)
    LPAR            reduce using rule 16 (suite -> stmt .)
    RPAR            reduce using rule 16 (suite -> stmt .)
    LSQB            reduce using rule 16 (suite -> stmt .)
    RSQB            reduce using rule 16 (suite -> stmt .)
    COLON           reduce using rule 16 (suite -> stmt .)
    OPERATOR        reduce using rule 16 (suite -> stmt .)
    CLASS           reduce using rule 16 (suite -> stmt .)
    DEF             reduce using rule 16 (suite -> stmt .)
    IF              reduce using rule 16 (suite -> stmt .)
    ELIF            reduce using rule 16 (suite -> stmt .)
    ELSE            reduce using rule 16 (suite -> stmt .)
    TRY             reduce using rule 16 (suite -> stmt .)
    EXCEPT          reduce using rule 16 (suite -> stmt .)
    FINALLY         reduce using rule 16 (suite -> stmt .)
    WITH            reduce using rule 16 (suite -> stmt .)
    WHILE           reduce using rule 16 (suite -> stmt .)
    FOR             reduce using rule 16 (suite -> stmt .)
    $end            reduce using rule 16 (suite -> stmt .)
    DEDENT          reduce using rule 16 (suite -> stmt .)


state 16

    (52) fragment -> RSQB .

    NEWLINE         reduce using rule 52 (fragment -> RSQB .)
    ENDMARKER       reduce using rule 52 (fragment -> RSQB .)
    LBRACE          reduce using rule 52 (fragment -> RSQB .)
    RBRACE          reduce using rule 52 (fragment -> RSQB .)
    STRING_END      reduce using rule 52 (fragment -> RSQB .)
    STRING_CONTINUE reduce using rule 52 (fragment -> RSQB .)
    STRING          reduce using rule 52 (fragment -> RSQB .)
    STRING_START_TRIPLE reduce using rule 52 (fragment -> RSQB .)
    WS              reduce using rule 52 (fragment -> RSQB .)
    STRING_START_SINGLE reduce using rule 52 (fragment -> RSQB .)
    NUMBER          reduce using rule 52 (fragment -> RSQB .)
    NAME            reduce using rule 52 (fragment -> RSQB .)
    LPAR            reduce using rule 52 (fragment -> RSQB .)
    RPAR            reduce using rule 52 (fragment -> RSQB .)
    OPERATOR        reduce using rule 52 (fragment -> RSQB .)
    LSQB            reduce using rule 52 (fragment -> RSQB .)
    RSQB            reduce using rule 52 (fragment -> RSQB .)
    COLON           reduce using rule 52 (fragment -> RSQB .)


state 17

    (53) fragment -> COLON .

    NEWLINE         reduce using rule 53 (fragment -> COLON .)
    ENDMARKER       reduce using rule 53 (fragment -> COLON .)
    LBRACE          reduce using rule 53 (fragment -> COLON .)
    RBRACE          reduce using rule 53 (fragment -> COLON .)
    STRING_END      reduce using rule 53 (fragment -> COLON .)
    STRING_CONTINUE reduce using rule 53 (fragment -> COLON .)
    STRING          reduce using rule 53 (fragment -> COLON .)
    STRING_START_TRIPLE reduce using rule 53 (fragment -> COLON .)
    WS              reduce using rule 53 (fragment -> COLON .)
    STRING_START_SINGLE reduce using rule 53 (fragment -> COLON .)
    NUMBER          reduce using rule 53 (fragment -> COLON .)
    NAME            reduce using rule 53 (fragment -> COLON .)
    LPAR            reduce using rule 53 (fragment -> COLON .)
    RPAR            reduce using rule 53 (fragment -> COLON .)
    OPERATOR        reduce using rule 53 (fragment -> COLON .)
    LSQB            reduce using rule 53 (fragment -> COLON .)
    RSQB            reduce using rule 53 (fragment -> COLON .)
    COLON           reduce using rule 53 (fragment -> COLON .)


state 18

    (0) S' -> file_input .



state 19

    (51) fragment -> LSQB .

    NEWLINE         reduce using rule 51 (fragment -> LSQB .)
    ENDMARKER       reduce using rule 51 (fragment -> LSQB .)
    LBRACE          reduce using rule 51 (fragment -> LSQB .)
    RBRACE          reduce using rule 51 (fragment -> LSQB .)
    STRING_END      reduce using rule 51 (fragment -> LSQB .)
    STRING_CONTINUE reduce using rule 51 (fragment -> LSQB .)
    STRING          reduce using rule 51 (fragment -> LSQB .)
    STRING_START_TRIPLE reduce using rule 51 (fragment -> LSQB .)
    WS              reduce using rule 51 (fragment -> LSQB .)
    STRING_START_SINGLE reduce using rule 51 (fragment -> LSQB .)
    NUMBER          reduce using rule 51 (fragment -> LSQB .)
    NAME            reduce using rule 51 (fragment -> LSQB .)
    LPAR            reduce using rule 51 (fragment -> LSQB .)
    RPAR            reduce using rule 51 (fragment -> LSQB .)
    OPERATOR        reduce using rule 51 (fragment -> LSQB .)
    LSQB            reduce using rule 51 (fragment -> LSQB .)
    RSQB            reduce using rule 51 (fragment -> LSQB .)
    COLON           reduce using rule 51 (fragment -> LSQB .)


state 20

    (41) fragment -> STRING_END .

    NEWLINE         reduce using rule 41 (fragment -> STRING_END .)
    ENDMARKER       reduce using rule 41 (fragment -> STRING_END .)
    LBRACE          reduce using rule 41 (fragment -> STRING_END .)
    RBRACE          reduce using rule 41 (fragment -> STRING_END .)
    STRING_END      reduce using rule 41 (fragment -> STRING_END .)
    STRING_CONTINUE reduce using rule 41 (fragment -> STRING_END .)
    STRING          reduce using rule 41 (fragment -> STRING_END .)
    STRING_START_TRIPLE reduce using rule 41 (fragment -> STRING_END .)
    WS              reduce using rule 41 (fragment -> STRING_END .)
    STRING_START_SINGLE reduce using rule 41 (fragment -> STRING_END .)
    NUMBER          reduce using rule 41 (fragment -> STRING_END .)
    NAME            reduce using rule 41 (fragment -> STRING_END .)
    LPAR            reduce using rule 41 (fragment -> STRING_END .)
    RPAR            reduce using rule 41 (fragment -> STRING_END .)
    OPERATOR        reduce using rule 41 (fragment -> STRING_END .)
    LSQB            reduce using rule 41 (fragment -> STRING_END .)
    RSQB            reduce using rule 41 (fragment -> STRING_END .)
    COLON           reduce using rule 41 (fragment -> STRING_END .)


state 21

    (9) block_keyword -> ELSE .

    LBRACE          reduce using rule 9 (block_keyword -> ELSE .)
    RBRACE          reduce using rule 9 (block_keyword -> ELSE .)
    STRING_END      reduce using rule 9 (block_keyword -> ELSE .)
    STRING_CONTINUE reduce using rule 9 (block_keyword -> ELSE .)
    STRING          reduce using rule 9 (block_keyword -> ELSE .)
    STRING_START_TRIPLE reduce using rule 9 (block_keyword -> ELSE .)
    WS              reduce using rule 9 (block_keyword -> ELSE .)
    STRING_START_SINGLE reduce using rule 9 (block_keyword -> ELSE .)
    NUMBER          reduce using rule 9 (block_keyword -> ELSE .)
    NAME            reduce using rule 9 (block_keyword -> ELSE .)
    LPAR            reduce using rule 9 (block_keyword -> ELSE .)
    RPAR            reduce using rule 9 (block_keyword -> ELSE .)
    LSQB            reduce using rule 9 (block_keyword -> ELSE .)
    RSQB            reduce using rule 9 (block_keyword -> ELSE .)
    COLON           reduce using rule 9 (block_keyword -> ELSE .)
    OPERATOR        reduce using rule 9 (block_keyword -> ELSE .)


state 22

    (47) fragment -> NUMBER .

    NEWLINE         reduce using rule 47 (fragment -> NUMBER .)
    ENDMARKER       reduce using rule 47 (fragment -> NUMBER .)
    LBRACE          reduce using rule 47 (fragment -> NUMBER .)
    RBRACE          reduce using rule 47 (fragment -> NUMBER .)
    STRING_END      reduce using rule 47 (fragment -> NUMBER .)
    STRING_CONTINUE reduce using rule 47 (fragment -> NUMBER .)
    STRING          reduce using rule 47 (fragment -> NUMBER .)
    STRING_START_TRIPLE reduce using rule 47 (fragment -> NUMBER .)
    WS              reduce using rule 47 (fragment -> NUMBER .)
    STRING_START_SINGLE reduce using rule 47 (fragment -> NUMBER .)
    NUMBER          reduce using rule 47 (fragment -> NUMBER .)
    NAME            reduce using rule 47 (fragment -> NUMBER .)
    LPAR            reduce using rule 47 (fragment -> NUMBER .)
    RPAR            reduce using rule 47 (fragment -> NUMBER .)
    OPERATOR        reduce using rule 47 (fragment -> NUMBER .)
    LSQB            reduce using rule 47 (fragment -> NUMBER .)
    RSQB            reduce using rule 47 (fragment -> NUMBER .)
    COLON           reduce using rule 47 (fragment -> NUMBER .)


state 23

    (12) block_keyword -> FINALLY .

    LBRACE          reduce using rule 12 (block_keyword -> FINALLY .)
    RBRACE          reduce using rule 12 (block_keyword -> FINALLY .)
    STRING_END      reduce using rule 12 (block_keyword -> FINALLY .)
    STRING_CONTINUE reduce using rule 12 (block_keyword -> FINALLY .)
    STRING          reduce using rule 12 (block_keyword -> FINALLY .)
    STRING_START_TRIPLE reduce using rule 12 (block_keyword -> FINALLY .)
    WS              reduce using rule 12 (block_keyword -> FINALLY .)
    STRING_START_SINGLE reduce using rule 12 (block_keyword -> FINALLY .)
    NUMBER          reduce using rule 12 (block_keyword -> FINALLY .)
    NAME            reduce using rule 12 (block_keyword -> FINALLY .)
    LPAR            reduce using rule 12 (block_keyword -> FINALLY .)
    RPAR            reduce using rule 12 (block_keyword -> FINALLY .)
    LSQB            reduce using rule 12 (block_keyword -> FINALLY .)
    RSQB            reduce using rule 12 (block_keyword -> FINALLY .)
    COLON           reduce using rule 12 (block_keyword -> FINALLY .)
    OPERATOR        reduce using rule 12 (block_keyword -> FINALLY .)


state 24

    (18) stmt -> fragment . NEWLINE
    (19) stmt -> fragment . ENDMARKER
    (23) fragment -> fragment . LBRACE
    (24) fragment -> fragment . RBRACE
    (25) fragment -> fragment . STRING_END
    (26) fragment -> fragment . STRING_CONTINUE
    (27) fragment -> fragment . STRING
    (28) fragment -> fragment . STRING_START_TRIPLE
    (29) fragment -> fragment . WS
    (30) fragment -> fragment . STRING_START_SINGLE
    (31) fragment -> fragment . NUMBER
    (32) fragment -> fragment . NAME
    (33) fragment -> fragment . LPAR
    (34) fragment -> fragment . RPAR
    (35) fragment -> fragment . OPERATOR
    (36) fragment -> fragment . LSQB
    (37) fragment -> fragment . RSQB
    (38) fragment -> fragment . COLON

    NEWLINE         shift and go to state 49
    ENDMARKER       shift and go to state 48
    LBRACE          shift and go to state 42
    RBRACE          shift and go to state 44
    STRING_END      shift and go to state 38
    STRING_CONTINUE shift and go to state 40
    STRING          shift and go to state 41
    STRING_START_TRIPLE shift and go to state 52
    WS              shift and go to state 50
    STRING_START_SINGLE shift and go to state 45
    NUMBER          shift and go to state 39
    NAME            shift and go to state 54
    LPAR            shift and go to state 46
    RPAR            shift and go to state 51
    OPERATOR        shift and go to state 43
    LSQB            shift and go to state 55
    RSQB            shift and go to state 47
    COLON           shift and go to state 53


state 25

    (13) block_keyword -> WITH .

    LBRACE          reduce using rule 13 (block_keyword -> WITH .)
    RBRACE          reduce using rule 13 (block_keyword -> WITH .)
    STRING_END      reduce using rule 13 (block_keyword -> WITH .)
    STRING_CONTINUE reduce using rule 13 (block_keyword -> WITH .)
    STRING          reduce using rule 13 (block_keyword -> WITH .)
    STRING_START_TRIPLE reduce using rule 13 (block_keyword -> WITH .)
    WS              reduce using rule 13 (block_keyword -> WITH .)
    STRING_START_SINGLE reduce using rule 13 (block_keyword -> WITH .)
    NUMBER          reduce using rule 13 (block_keyword -> WITH .)
    NAME            reduce using rule 13 (block_keyword -> WITH .)
    LPAR            reduce using rule 13 (block_keyword -> WITH .)
    RPAR            reduce using rule 13 (block_keyword -> WITH .)
    LSQB            reduce using rule 13 (block_keyword -> WITH .)
    RSQB            reduce using rule 13 (block_keyword -> WITH .)
    COLON           reduce using rule 13 (block_keyword -> WITH .)
    OPERATOR        reduce using rule 13 (block_keyword -> WITH .)


state 26

    (22) stmt -> block .

    NEWLINE         reduce using rule 22 (stmt -> block .)
    ENDMARKER       reduce using rule 22 (stmt -> block .)
    LBRACE          reduce using rule 22 (stmt -> block .)
    RBRACE          reduce using rule 22 (stmt -> block .)
    STRING_END      reduce using rule 22 (stmt -> block .)
    STRING_CONTINUE reduce using rule 22 (stmt -> block .)
    STRING          reduce using rule 22 (stmt -> block .)
    STRING_START_TRIPLE reduce using rule 22 (stmt -> block .)
    WS              reduce using rule 22 (stmt -> block .)
    STRING_START_SINGLE reduce using rule 22 (stmt -> block .)
    NUMBER          reduce using rule 22 (stmt -> block .)
    NAME            reduce using rule 22 (stmt -> block .)
    LPAR            reduce using rule 22 (stmt -> block .)
    RPAR            reduce using rule 22 (stmt -> block .)
    LSQB            reduce using rule 22 (stmt -> block .)
    RSQB            reduce using rule 22 (stmt -> block .)
    COLON           reduce using rule 22 (stmt -> block .)
    OPERATOR        reduce using rule 22 (stmt -> block .)
    CLASS           reduce using rule 22 (stmt -> block .)
    DEF             reduce using rule 22 (stmt -> block .)
    IF              reduce using rule 22 (stmt -> block .)
    ELIF            reduce using rule 22 (stmt -> block .)
    ELSE            reduce using rule 22 (stmt -> block .)
    TRY             reduce using rule 22 (stmt -> block .)
    EXCEPT          reduce using rule 22 (stmt -> block .)
    FINALLY         reduce using rule 22 (stmt -> block .)
    WITH            reduce using rule 22 (stmt -> block .)
    WHILE           reduce using rule 22 (stmt -> block .)
    FOR             reduce using rule 22 (stmt -> block .)
    $end            reduce using rule 22 (stmt -> block .)
    DEDENT          reduce using rule 22 (stmt -> block .)


state 27

    (5) block_keyword -> CLASS .

    LBRACE          reduce using rule 5 (block_keyword -> CLASS .)
    RBRACE          reduce using rule 5 (block_keyword -> CLASS .)
    STRING_END      reduce using rule 5 (block_keyword -> CLASS .)
    STRING_CONTINUE reduce using rule 5 (block_keyword -> CLASS .)
    STRING          reduce using rule 5 (block_keyword -> CLASS .)
    STRING_START_TRIPLE reduce using rule 5 (block_keyword -> CLASS .)
    WS              reduce using rule 5 (block_keyword -> CLASS .)
    STRING_START_SINGLE reduce using rule 5 (block_keyword -> CLASS .)
    NUMBER          reduce using rule 5 (block_keyword -> CLASS .)
    NAME            reduce using rule 5 (block_keyword -> CLASS .)
    LPAR            reduce using rule 5 (block_keyword -> CLASS .)
    RPAR            reduce using rule 5 (block_keyword -> CLASS .)
    LSQB            reduce using rule 5 (block_keyword -> CLASS .)
    RSQB            reduce using rule 5 (block_keyword -> CLASS .)
    COLON           reduce using rule 5 (block_keyword -> CLASS .)
    OPERATOR        reduce using rule 5 (block_keyword -> CLASS .)


state 28

    (8) block_keyword -> ELIF .

    LBRACE          reduce using rule 8 (block_keyword -> ELIF .)
    RBRACE          reduce using rule 8 (block_keyword -> ELIF .)
    STRING_END      reduce using rule 8 (block_keyword -> ELIF .)
    STRING_CONTINUE reduce using rule 8 (block_keyword -> ELIF .)
    STRING          reduce using rule 8 (block_keyword -> ELIF .)
    STRING_START_TRIPLE reduce using rule 8 (block_keyword -> ELIF .)
    WS              reduce using rule 8 (block_keyword -> ELIF .)
    STRING_START_SINGLE reduce using rule 8 (block_keyword -> ELIF .)
    NUMBER          reduce using rule 8 (block_keyword -> ELIF .)
    NAME            reduce using rule 8 (block_keyword -> ELIF .)
    LPAR            reduce using rule 8 (block_keyword -> ELIF .)
    RPAR            reduce using rule 8 (block_keyword -> ELIF .)
    LSQB            reduce using rule 8 (block_keyword -> ELIF .)
    RSQB            reduce using rule 8 (block_keyword -> ELIF .)
    COLON           reduce using rule 8 (block_keyword -> ELIF .)
    OPERATOR        reduce using rule 8 (block_keyword -> ELIF .)


state 29

    (54) fragment -> OPERATOR .

    NEWLINE         reduce using rule 54 (fragment -> OPERATOR .)
    ENDMARKER       reduce using rule 54 (fragment -> OPERATOR .)
    LBRACE          reduce using rule 54 (fragment -> OPERATOR .)
    RBRACE          reduce using rule 54 (fragment -> OPERATOR .)
    STRING_END      reduce using rule 54 (fragment -> OPERATOR .)
    STRING_CONTINUE reduce using rule 54 (fragment -> OPERATOR .)
    STRING          reduce using rule 54 (fragment -> OPERATOR .)
    STRING_START_TRIPLE reduce using rule 54 (fragment -> OPERATOR .)
    WS              reduce using rule 54 (fragment -> OPERATOR .)
    STRING_START_SINGLE reduce using rule 54 (fragment -> OPERATOR .)
    NUMBER          reduce using rule 54 (fragment -> OPERATOR .)
    NAME            reduce using rule 54 (fragment -> OPERATOR .)
    LPAR            reduce using rule 54 (fragment -> OPERATOR .)
    RPAR            reduce using rule 54 (fragment -> OPERATOR .)
    OPERATOR        reduce using rule 54 (fragment -> OPERATOR .)
    LSQB            reduce using rule 54 (fragment -> OPERATOR .)
    RSQB            reduce using rule 54 (fragment -> OPERATOR .)
    COLON           reduce using rule 54 (fragment -> OPERATOR .)


state 30

    (20) stmt -> NEWLINE .

    NEWLINE         reduce using rule 20 (stmt -> NEWLINE .)
    ENDMARKER       reduce using rule 20 (stmt -> NEWLINE .)
    LBRACE          reduce using rule 20 (stmt -> NEWLINE .)
    RBRACE          reduce using rule 20 (stmt -> NEWLINE .)
    STRING_END      reduce using rule 20 (stmt -> NEWLINE .)
    STRING_CONTINUE reduce using rule 20 (stmt -> NEWLINE .)
    STRING          reduce using rule 20 (stmt -> NEWLINE .)
    STRING_START_TRIPLE reduce using rule 20 (stmt -> NEWLINE .)
    WS              reduce using rule 20 (stmt -> NEWLINE .)
    STRING_START_SINGLE reduce using rule 20 (stmt -> NEWLINE .)
    NUMBER          reduce using rule 20 (stmt -> NEWLINE .)
    NAME            reduce using rule 20 (stmt -> NEWLINE .)
    LPAR            reduce using rule 20 (stmt -> NEWLINE .)
    RPAR            reduce using rule 20 (stmt -> NEWLINE .)
    LSQB            reduce using rule 20 (stmt -> NEWLINE .)
    RSQB            reduce using rule 20 (stmt -> NEWLINE .)
    COLON           reduce using rule 20 (stmt -> NEWLINE .)
    OPERATOR        reduce using rule 20 (stmt -> NEWLINE .)
    CLASS           reduce using rule 20 (stmt -> NEWLINE .)
    DEF             reduce using rule 20 (stmt -> NEWLINE .)
    IF              reduce using rule 20 (stmt -> NEWLINE .)
    ELIF            reduce using rule 20 (stmt -> NEWLINE .)
    ELSE            reduce using rule 20 (stmt -> NEWLINE .)
    TRY             reduce using rule 20 (stmt -> NEWLINE .)
    EXCEPT          reduce using rule 20 (stmt -> NEWLINE .)
    FINALLY         reduce using rule 20 (stmt -> NEWLINE .)
    WITH            reduce using rule 20 (stmt -> NEWLINE .)
    WHILE           reduce using rule 20 (stmt -> NEWLINE .)
    FOR             reduce using rule 20 (stmt -> NEWLINE .)
    $end            reduce using rule 20 (stmt -> NEWLINE .)
    DEDENT          reduce using rule 20 (stmt -> NEWLINE .)


state 31

    (6) block_keyword -> DEF .

    LBRACE          reduce using rule 6 (block_keyword -> DEF .)
    RBRACE          reduce using rule 6 (block_keyword -> DEF .)
    STRING_END      reduce using rule 6 (block_keyword -> DEF .)
    STRING_CONTINUE reduce using rule 6 (block_keyword -> DEF .)
    STRING          reduce using rule 6 (block_keyword -> DEF .)
    STRING_START_TRIPLE reduce using rule 6 (block_keyword -> DEF .)
    WS              reduce using rule 6 (block_keyword -> DEF .)
    STRING_START_SINGLE reduce using rule 6 (block_keyword -> DEF .)
    NUMBER          reduce using rule 6 (block_keyword -> DEF .)
    NAME            reduce using rule 6 (block_keyword -> DEF .)
    LPAR            reduce using rule 6 (block_keyword -> DEF .)
    RPAR            reduce using rule 6 (block_keyword -> DEF .)
    LSQB            reduce using rule 6 (block_keyword -> DEF .)
    RSQB            reduce using rule 6 (block_keyword -> DEF .)
    COLON           reduce using rule 6 (block_keyword -> DEF .)
    OPERATOR        reduce using rule 6 (block_keyword -> DEF .)


state 32

    (15) block_keyword -> FOR .

    LBRACE          reduce using rule 15 (block_keyword -> FOR .)
    RBRACE          reduce using rule 15 (block_keyword -> FOR .)
    STRING_END      reduce using rule 15 (block_keyword -> FOR .)
    STRING_CONTINUE reduce using rule 15 (block_keyword -> FOR .)
    STRING          reduce using rule 15 (block_keyword -> FOR .)
    STRING_START_TRIPLE reduce using rule 15 (block_keyword -> FOR .)
    WS              reduce using rule 15 (block_keyword -> FOR .)
    STRING_START_SINGLE reduce using rule 15 (block_keyword -> FOR .)
    NUMBER          reduce using rule 15 (block_keyword -> FOR .)
    NAME            reduce using rule 15 (block_keyword -> FOR .)
    LPAR            reduce using rule 15 (block_keyword -> FOR .)
    RPAR            reduce using rule 15 (block_keyword -> FOR .)
    LSQB            reduce using rule 15 (block_keyword -> FOR .)
    RSQB            reduce using rule 15 (block_keyword -> FOR .)
    COLON           reduce using rule 15 (block_keyword -> FOR .)
    OPERATOR        reduce using rule 15 (block_keyword -> FOR .)


state 33

    (44) fragment -> STRING_START_TRIPLE .

    NEWLINE         reduce using rule 44 (fragment -> STRING_START_TRIPLE .)
    ENDMARKER       reduce using rule 44 (fragment -> STRING_START_TRIPLE .)
    LBRACE          reduce using rule 44 (fragment -> STRING_START_TRIPLE .)
    RBRACE          reduce using rule 44 (fragment -> STRING_START_TRIPLE .)
    STRING_END      reduce using rule 44 (fragment -> STRING_START_TRIPLE .)
    STRING_CONTINUE reduce using rule 44 (fragment -> STRING_START_TRIPLE .)
    STRING          reduce using rule 44 (fragment -> STRING_START_TRIPLE .)
    STRING_START_TRIPLE reduce using rule 44 (fragment -> STRING_START_TRIPLE .)
    WS              reduce using rule 44 (fragment -> STRING_START_TRIPLE .)
    STRING_START_SINGLE reduce using rule 44 (fragment -> STRING_START_TRIPLE .)
    NUMBER          reduce using rule 44 (fragment -> STRING_START_TRIPLE .)
    NAME            reduce using rule 44 (fragment -> STRING_START_TRIPLE .)
    LPAR            reduce using rule 44 (fragment -> STRING_START_TRIPLE .)
    RPAR            reduce using rule 44 (fragment -> STRING_START_TRIPLE .)
    OPERATOR        reduce using rule 44 (fragment -> STRING_START_TRIPLE .)
    LSQB            reduce using rule 44 (fragment -> STRING_START_TRIPLE .)
    RSQB            reduce using rule 44 (fragment -> STRING_START_TRIPLE .)
    COLON           reduce using rule 44 (fragment -> STRING_START_TRIPLE .)


state 34

    (48) fragment -> NAME .

    NEWLINE         reduce using rule 48 (fragment -> NAME .)
    ENDMARKER       reduce using rule 48 (fragment -> NAME .)
    LBRACE          reduce using rule 48 (fragment -> NAME .)
    RBRACE          reduce using rule 48 (fragment -> NAME .)
    STRING_END      reduce using rule 48 (fragment -> NAME .)
    STRING_CONTINUE reduce using rule 48 (fragment -> NAME .)
    STRING          reduce using rule 48 (fragment -> NAME .)
    STRING_START_TRIPLE reduce using rule 48 (fragment -> NAME .)
    WS              reduce using rule 48 (fragment -> NAME .)
    STRING_START_SINGLE reduce using rule 48 (fragment -> NAME .)
    NUMBER          reduce using rule 48 (fragment -> NAME .)
    NAME            reduce using rule 48 (fragment -> NAME .)
    LPAR            reduce using rule 48 (fragment -> NAME .)
    RPAR            reduce using rule 48 (fragment -> NAME .)
    OPERATOR        reduce using rule 48 (fragment -> NAME .)
    LSQB            reduce using rule 48 (fragment -> NAME .)
    RSQB            reduce using rule 48 (fragment -> NAME .)
    COLON           reduce using rule 48 (fragment -> NAME .)


state 35

    (14) block_keyword -> WHILE .

    LBRACE          reduce using rule 14 (block_keyword -> WHILE .)
    RBRACE          reduce using rule 14 (block_keyword -> WHILE .)
    STRING_END      reduce using rule 14 (block_keyword -> WHILE .)
    STRING_CONTINUE reduce using rule 14 (block_keyword -> WHILE .)
    STRING          reduce using rule 14 (block_keyword -> WHILE .)
    STRING_START_TRIPLE reduce using rule 14 (block_keyword -> WHILE .)
    WS              reduce using rule 14 (block_keyword -> WHILE .)
    STRING_START_SINGLE reduce using rule 14 (block_keyword -> WHILE .)
    NUMBER          reduce using rule 14 (block_keyword -> WHILE .)
    NAME            reduce using rule 14 (block_keyword -> WHILE .)
    LPAR            reduce using rule 14 (block_keyword -> WHILE .)
    RPAR            reduce using rule 14 (block_keyword -> WHILE .)
    LSQB            reduce using rule 14 (block_keyword -> WHILE .)
    RSQB            reduce using rule 14 (block_keyword -> WHILE .)
    COLON           reduce using rule 14 (block_keyword -> WHILE .)
    OPERATOR        reduce using rule 14 (block_keyword -> WHILE .)


state 36

    (2) block -> block_keyword fragment . COLON NEWLINE INDENT suite DEDENT
    (3) block -> block_keyword fragment . COLON suite
    (4) block -> block_keyword fragment . COLON NEWLINE
    (23) fragment -> fragment . LBRACE
    (24) fragment -> fragment . RBRACE
    (25) fragment -> fragment . STRING_END
    (26) fragment -> fragment . STRING_CONTINUE
    (27) fragment -> fragment . STRING
    (28) fragment -> fragment . STRING_START_TRIPLE
    (29) fragment -> fragment . WS
    (30) fragment -> fragment . STRING_START_SINGLE
    (31) fragment -> fragment . NUMBER
    (32) fragment -> fragment . NAME
    (33) fragment -> fragment . LPAR
    (34) fragment -> fragment . RPAR
    (35) fragment -> fragment . OPERATOR
    (36) fragment -> fragment . LSQB
    (37) fragment -> fragment . RSQB
    (38) fragment -> fragment . COLON

    COLON           shift and go to state 56
    LBRACE          shift and go to state 42
    RBRACE          shift and go to state 44
    STRING_END      shift and go to state 38
    STRING_CONTINUE shift and go to state 40
    STRING          shift and go to state 41
    STRING_START_TRIPLE shift and go to state 52
    WS              shift and go to state 50
    STRING_START_SINGLE shift and go to state 45
    NUMBER          shift and go to state 39
    NAME            shift and go to state 54
    LPAR            shift and go to state 46
    RPAR            shift and go to state 51
    OPERATOR        shift and go to state 43
    LSQB            shift and go to state 55
    RSQB            shift and go to state 47


state 37

    (17) suite -> suite stmt .

    NEWLINE         reduce using rule 17 (suite -> suite stmt .)
    ENDMARKER       reduce using rule 17 (suite -> suite stmt .)
    LBRACE          reduce using rule 17 (suite -> suite stmt .)
    RBRACE          reduce using rule 17 (suite -> suite stmt .)
    STRING_END      reduce using rule 17 (suite -> suite stmt .)
    STRING_CONTINUE reduce using rule 17 (suite -> suite stmt .)
    STRING          reduce using rule 17 (suite -> suite stmt .)
    STRING_START_TRIPLE reduce using rule 17 (suite -> suite stmt .)
    WS              reduce using rule 17 (suite -> suite stmt .)
    STRING_START_SINGLE reduce using rule 17 (suite -> suite stmt .)
    NUMBER          reduce using rule 17 (suite -> suite stmt .)
    NAME            reduce using rule 17 (suite -> suite stmt .)
    LPAR            reduce using rule 17 (suite -> suite stmt .)
    RPAR            reduce using rule 17 (suite -> suite stmt .)
    LSQB            reduce using rule 17 (suite -> suite stmt .)
    RSQB            reduce using rule 17 (suite -> suite stmt .)
    COLON           reduce using rule 17 (suite -> suite stmt .)
    OPERATOR        reduce using rule 17 (suite -> suite stmt .)
    CLASS           reduce using rule 17 (suite -> suite stmt .)
    DEF             reduce using rule 17 (suite -> suite stmt .)
    IF              reduce using rule 17 (suite -> suite stmt .)
    ELIF            reduce using rule 17 (suite -> suite stmt .)
    ELSE            reduce using rule 17 (suite -> suite stmt .)
    TRY             reduce using rule 17 (suite -> suite stmt .)
    EXCEPT          reduce using rule 17 (suite -> suite stmt .)
    FINALLY         reduce using rule 17 (suite -> suite stmt .)
    WITH            reduce using rule 17 (suite -> suite stmt .)
    WHILE           reduce using rule 17 (suite -> suite stmt .)
    FOR             reduce using rule 17 (suite -> suite stmt .)
    $end            reduce using rule 17 (suite -> suite stmt .)
    DEDENT          reduce using rule 17 (suite -> suite stmt .)


state 38

    (25) fragment -> fragment STRING_END .

    NEWLINE         reduce using rule 25 (fragment -> fragment STRING_END .)
    ENDMARKER       reduce using rule 25 (fragment -> fragment STRING_END .)
    LBRACE          reduce using rule 25 (fragment -> fragment STRING_END .)
    RBRACE          reduce using rule 25 (fragment -> fragment STRING_END .)
    STRING_END      reduce using rule 25 (fragment -> fragment STRING_END .)
    STRING_CONTINUE reduce using rule 25 (fragment -> fragment STRING_END .)
    STRING          reduce using rule 25 (fragment -> fragment STRING_END .)
    STRING_START_TRIPLE reduce using rule 25 (fragment -> fragment STRING_END .)
    WS              reduce using rule 25 (fragment -> fragment STRING_END .)
    STRING_START_SINGLE reduce using rule 25 (fragment -> fragment STRING_END .)
    NUMBER          reduce using rule 25 (fragment -> fragment STRING_END .)
    NAME            reduce using rule 25 (fragment -> fragment STRING_END .)
    LPAR            reduce using rule 25 (fragment -> fragment STRING_END .)
    RPAR            reduce using rule 25 (fragment -> fragment STRING_END .)
    OPERATOR        reduce using rule 25 (fragment -> fragment STRING_END .)
    LSQB            reduce using rule 25 (fragment -> fragment STRING_END .)
    RSQB            reduce using rule 25 (fragment -> fragment STRING_END .)
    COLON           reduce using rule 25 (fragment -> fragment STRING_END .)


state 39

    (31) fragment -> fragment NUMBER .

    NEWLINE         reduce using rule 31 (fragment -> fragment NUMBER .)
    ENDMARKER       reduce using rule 31 (fragment -> fragment NUMBER .)
    LBRACE          reduce using rule 31 (fragment -> fragment NUMBER .)
    RBRACE          reduce using rule 31 (fragment -> fragment NUMBER .)
    STRING_END      reduce using rule 31 (fragment -> fragment NUMBER .)
    STRING_CONTINUE reduce using rule 31 (fragment -> fragment NUMBER .)
    STRING          reduce using rule 31 (fragment -> fragment NUMBER .)
    STRING_START_TRIPLE reduce using rule 31 (fragment -> fragment NUMBER .)
    WS              reduce using rule 31 (fragment -> fragment NUMBER .)
    STRING_START_SINGLE reduce using rule 31 (fragment -> fragment NUMBER .)
    NUMBER          reduce using rule 31 (fragment -> fragment NUMBER .)
    NAME            reduce using rule 31 (fragment -> fragment NUMBER .)
    LPAR            reduce using rule 31 (fragment -> fragment NUMBER .)
    RPAR            reduce using rule 31 (fragment -> fragment NUMBER .)
    OPERATOR        reduce using rule 31 (fragment -> fragment NUMBER .)
    LSQB            reduce using rule 31 (fragment -> fragment NUMBER .)
    RSQB            reduce using rule 31 (fragment -> fragment NUMBER .)
    COLON           reduce using rule 31 (fragment -> fragment NUMBER .)


state 40

    (26) fragment -> fragment STRING_CONTINUE .

    NEWLINE         reduce using rule 26 (fragment -> fragment STRING_CONTINUE .)
    ENDMARKER       reduce using rule 26 (fragment -> fragment STRING_CONTINUE .)
    LBRACE          reduce using rule 26 (fragment -> fragment STRING_CONTINUE .)
    RBRACE          reduce using rule 26 (fragment -> fragment STRING_CONTINUE .)
    STRING_END      reduce using rule 26 (fragment -> fragment STRING_CONTINUE .)
    STRING_CONTINUE reduce using rule 26 (fragment -> fragment STRING_CONTINUE .)
    STRING          reduce using rule 26 (fragment -> fragment STRING_CONTINUE .)
    STRING_START_TRIPLE reduce using rule 26 (fragment -> fragment STRING_CONTINUE .)
    WS              reduce using rule 26 (fragment -> fragment STRING_CONTINUE .)
    STRING_START_SINGLE reduce using rule 26 (fragment -> fragment STRING_CONTINUE .)
    NUMBER          reduce using rule 26 (fragment -> fragment STRING_CONTINUE .)
    NAME            reduce using rule 26 (fragment -> fragment STRING_CONTINUE .)
    LPAR            reduce using rule 26 (fragment -> fragment STRING_CONTINUE .)
    RPAR            reduce using rule 26 (fragment -> fragment STRING_CONTINUE .)
    OPERATOR        reduce using rule 26 (fragment -> fragment STRING_CONTINUE .)
    LSQB            reduce using rule 26 (fragment -> fragment STRING_CONTINUE .)
    RSQB            reduce using rule 26 (fragment -> fragment STRING_CONTINUE .)
    COLON           reduce using rule 26 (fragment -> fragment STRING_CONTINUE .)


state 41

    (27) fragment -> fragment STRING .

    NEWLINE         reduce using rule 27 (fragment -> fragment STRING .)
    ENDMARKER       reduce using rule 27 (fragment -> fragment STRING .)
    LBRACE          reduce using rule 27 (fragment -> fragment STRING .)
    RBRACE          reduce using rule 27 (fragment -> fragment STRING .)
    STRING_END      reduce using rule 27 (fragment -> fragment STRING .)
    STRING_CONTINUE reduce using rule 27 (fragment -> fragment STRING .)
    STRING          reduce using rule 27 (fragment -> fragment STRING .)
    STRING_START_TRIPLE reduce using rule 27 (fragment -> fragment STRING .)
    WS              reduce using rule 27 (fragment -> fragment STRING .)
    STRING_START_SINGLE reduce using rule 27 (fragment -> fragment STRING .)
    NUMBER          reduce using rule 27 (fragment -> fragment STRING .)
    NAME            reduce using rule 27 (fragment -> fragment STRING .)
    LPAR            reduce using rule 27 (fragment -> fragment STRING .)
    RPAR            reduce using rule 27 (fragment -> fragment STRING .)
    OPERATOR        reduce using rule 27 (fragment -> fragment STRING .)
    LSQB            reduce using rule 27 (fragment -> fragment STRING .)
    RSQB            reduce using rule 27 (fragment -> fragment STRING .)
    COLON           reduce using rule 27 (fragment -> fragment STRING .)


state 42

    (23) fragment -> fragment LBRACE .

    NEWLINE         reduce using rule 23 (fragment -> fragment LBRACE .)
    ENDMARKER       reduce using rule 23 (fragment -> fragment LBRACE .)
    LBRACE          reduce using rule 23 (fragment -> fragment LBRACE .)
    RBRACE          reduce using rule 23 (fragment -> fragment LBRACE .)
    STRING_END      reduce using rule 23 (fragment -> fragment LBRACE .)
    STRING_CONTINUE reduce using rule 23 (fragment -> fragment LBRACE .)
    STRING          reduce using rule 23 (fragment -> fragment LBRACE .)
    STRING_START_TRIPLE reduce using rule 23 (fragment -> fragment LBRACE .)
    WS              reduce using rule 23 (fragment -> fragment LBRACE .)
    STRING_START_SINGLE reduce using rule 23 (fragment -> fragment LBRACE .)
    NUMBER          reduce using rule 23 (fragment -> fragment LBRACE .)
    NAME            reduce using rule 23 (fragment -> fragment LBRACE .)
    LPAR            reduce using rule 23 (fragment -> fragment LBRACE .)
    RPAR            reduce using rule 23 (fragment -> fragment LBRACE .)
    OPERATOR        reduce using rule 23 (fragment -> fragment LBRACE .)
    LSQB            reduce using rule 23 (fragment -> fragment LBRACE .)
    RSQB            reduce using rule 23 (fragment -> fragment LBRACE .)
    COLON           reduce using rule 23 (fragment -> fragment LBRACE .)


state 43

    (35) fragment -> fragment OPERATOR .

    NEWLINE         reduce using rule 35 (fragment -> fragment OPERATOR .)
    ENDMARKER       reduce using rule 35 (fragment -> fragment OPERATOR .)
    LBRACE          reduce using rule 35 (fragment -> fragment OPERATOR .)
    RBRACE          reduce using rule 35 (fragment -> fragment OPERATOR .)
    STRING_END      reduce using rule 35 (fragment -> fragment OPERATOR .)
    STRING_CONTINUE reduce using rule 35 (fragment -> fragment OPERATOR .)
    STRING          reduce using rule 35 (fragment -> fragment OPERATOR .)
    STRING_START_TRIPLE reduce using rule 35 (fragment -> fragment OPERATOR .)
    WS              reduce using rule 35 (fragment -> fragment OPERATOR .)
    STRING_START_SINGLE reduce using rule 35 (fragment -> fragment OPERATOR .)
    NUMBER          reduce using rule 35 (fragment -> fragment OPERATOR .)
    NAME            reduce using rule 35 (fragment -> fragment OPERATOR .)
    LPAR            reduce using rule 35 (fragment -> fragment OPERATOR .)
    RPAR            reduce using rule 35 (fragment -> fragment OPERATOR .)
    OPERATOR        reduce using rule 35 (fragment -> fragment OPERATOR .)
    LSQB            reduce using rule 35 (fragment -> fragment OPERATOR .)
    RSQB            reduce using rule 35 (fragment -> fragment OPERATOR .)
    COLON           reduce using rule 35 (fragment -> fragment OPERATOR .)


state 44

    (24) fragment -> fragment RBRACE .

    NEWLINE         reduce using rule 24 (fragment -> fragment RBRACE .)
    ENDMARKER       reduce using rule 24 (fragment -> fragment RBRACE .)
    LBRACE          reduce using rule 24 (fragment -> fragment RBRACE .)
    RBRACE          reduce using rule 24 (fragment -> fragment RBRACE .)
    STRING_END      reduce using rule 24 (fragment -> fragment RBRACE .)
    STRING_CONTINUE reduce using rule 24 (fragment -> fragment RBRACE .)
    STRING          reduce using rule 24 (fragment -> fragment RBRACE .)
    STRING_START_TRIPLE reduce using rule 24 (fragment -> fragment RBRACE .)
    WS              reduce using rule 24 (fragment -> fragment RBRACE .)
    STRING_START_SINGLE reduce using rule 24 (fragment -> fragment RBRACE .)
    NUMBER          reduce using rule 24 (fragment -> fragment RBRACE .)
    NAME            reduce using rule 24 (fragment -> fragment RBRACE .)
    LPAR            reduce using rule 24 (fragment -> fragment RBRACE .)
    RPAR            reduce using rule 24 (fragment -> fragment RBRACE .)
    OPERATOR        reduce using rule 24 (fragment -> fragment RBRACE .)
    LSQB            reduce using rule 24 (fragment -> fragment RBRACE .)
    RSQB            reduce using rule 24 (fragment -> fragment RBRACE .)
    COLON           reduce using rule 24 (fragment -> fragment RBRACE .)


state 45

    (30) fragment -> fragment STRING_START_SINGLE .

    NEWLINE         reduce using rule 30 (fragment -> fragment STRING_START_SINGLE .)
    ENDMARKER       reduce using rule 30 (fragment -> fragment STRING_START_SINGLE .)
    LBRACE          reduce using rule 30 (fragment -> fragment STRING_START_SINGLE .)
    RBRACE          reduce using rule 30 (fragment -> fragment STRING_START_SINGLE .)
    STRING_END      reduce using rule 30 (fragment -> fragment STRING_START_SINGLE .)
    STRING_CONTINUE reduce using rule 30 (fragment -> fragment STRING_START_SINGLE .)
    STRING          reduce using rule 30 (fragment -> fragment STRING_START_SINGLE .)
    STRING_START_TRIPLE reduce using rule 30 (fragment -> fragment STRING_START_SINGLE .)
    WS              reduce using rule 30 (fragment -> fragment STRING_START_SINGLE .)
    STRING_START_SINGLE reduce using rule 30 (fragment -> fragment STRING_START_SINGLE .)
    NUMBER          reduce using rule 30 (fragment -> fragment STRING_START_SINGLE .)
    NAME            reduce using rule 30 (fragment -> fragment STRING_START_SINGLE .)
    LPAR            reduce using rule 30 (fragment -> fragment STRING_START_SINGLE .)
    RPAR            reduce using rule 30 (fragment -> fragment STRING_START_SINGLE .)
    OPERATOR        reduce using rule 30 (fragment -> fragment STRING_START_SINGLE .)
    LSQB            reduce using rule 30 (fragment -> fragment STRING_START_SINGLE .)
    RSQB            reduce using rule 30 (fragment -> fragment STRING_START_SINGLE .)
    COLON           reduce using rule 30 (fragment -> fragment STRING_START_SINGLE .)


state 46

    (33) fragment -> fragment LPAR .

    NEWLINE         reduce using rule 33 (fragment -> fragment LPAR .)
    ENDMARKER       reduce using rule 33 (fragment -> fragment LPAR .)
    LBRACE          reduce using rule 33 (fragment -> fragment LPAR .)
    RBRACE          reduce using rule 33 (fragment -> fragment LPAR .)
    STRING_END      reduce using rule 33 (fragment -> fragment LPAR .)
    STRING_CONTINUE reduce using rule 33 (fragment -> fragment LPAR .)
    STRING          reduce using rule 33 (fragment -> fragment LPAR .)
    STRING_START_TRIPLE reduce using rule 33 (fragment -> fragment LPAR .)
    WS              reduce using rule 33 (fragment -> fragment LPAR .)
    STRING_START_SINGLE reduce using rule 33 (fragment -> fragment LPAR .)
    NUMBER          reduce using rule 33 (fragment -> fragment LPAR .)
    NAME            reduce using rule 33 (fragment -> fragment LPAR .)
    LPAR            reduce using rule 33 (fragment -> fragment LPAR .)
    RPAR            reduce using rule 33 (fragment -> fragment LPAR .)
    OPERATOR        reduce using rule 33 (fragment -> fragment LPAR .)
    LSQB            reduce using rule 33 (fragment -> fragment LPAR .)
    RSQB            reduce using rule 33 (fragment -> fragment LPAR .)
    COLON           reduce using rule 33 (fragment -> fragment LPAR .)


state 47

    (37) fragment -> fragment RSQB .

    NEWLINE         reduce using rule 37 (fragment -> fragment RSQB .)
    ENDMARKER       reduce using rule 37 (fragment -> fragment RSQB .)
    LBRACE          reduce using rule 37 (fragment -> fragment RSQB .)
    RBRACE          reduce using rule 37 (fragment -> fragment RSQB .)
    STRING_END      reduce using rule 37 (fragment -> fragment RSQB .)
    STRING_CONTINUE reduce using rule 37 (fragment -> fragment RSQB .)
    STRING          reduce using rule 37 (fragment -> fragment RSQB .)
    STRING_START_TRIPLE reduce using rule 37 (fragment -> fragment RSQB .)
    WS              reduce using rule 37 (fragment -> fragment RSQB .)
    STRING_START_SINGLE reduce using rule 37 (fragment -> fragment RSQB .)
    NUMBER          reduce using rule 37 (fragment -> fragment RSQB .)
    NAME            reduce using rule 37 (fragment -> fragment RSQB .)
    LPAR            reduce using rule 37 (fragment -> fragment RSQB .)
    RPAR            reduce using rule 37 (fragment -> fragment RSQB .)
    OPERATOR        reduce using rule 37 (fragment -> fragment RSQB .)
    LSQB            reduce using rule 37 (fragment -> fragment RSQB .)
    RSQB            reduce using rule 37 (fragment -> fragment RSQB .)
    COLON           reduce using rule 37 (fragment -> fragment RSQB .)


state 48

    (19) stmt -> fragment ENDMARKER .

    NEWLINE         reduce using rule 19 (stmt -> fragment ENDMARKER .)
    ENDMARKER       reduce using rule 19 (stmt -> fragment ENDMARKER .)
    LBRACE          reduce using rule 19 (stmt -> fragment ENDMARKER .)
    RBRACE          reduce using rule 19 (stmt -> fragment ENDMARKER .)
    STRING_END      reduce using rule 19 (stmt -> fragment ENDMARKER .)
    STRING_CONTINUE reduce using rule 19 (stmt -> fragment ENDMARKER .)
    STRING          reduce using rule 19 (stmt -> fragment ENDMARKER .)
    STRING_START_TRIPLE reduce using rule 19 (stmt -> fragment ENDMARKER .)
    WS              reduce using rule 19 (stmt -> fragment ENDMARKER .)
    STRING_START_SINGLE reduce using rule 19 (stmt -> fragment ENDMARKER .)
    NUMBER          reduce using rule 19 (stmt -> fragment ENDMARKER .)
    NAME            reduce using rule 19 (stmt -> fragment ENDMARKER .)
    LPAR            reduce using rule 19 (stmt -> fragment ENDMARKER .)
    RPAR            reduce using rule 19 (stmt -> fragment ENDMARKER .)
    LSQB            reduce using rule 19 (stmt -> fragment ENDMARKER .)
    RSQB            reduce using rule 19 (stmt -> fragment ENDMARKER .)
    COLON           reduce using rule 19 (stmt -> fragment ENDMARKER .)
    OPERATOR        reduce using rule 19 (stmt -> fragment ENDMARKER .)
    CLASS           reduce using rule 19 (stmt -> fragment ENDMARKER .)
    DEF             reduce using rule 19 (stmt -> fragment ENDMARKER .)
    IF              reduce using rule 19 (stmt -> fragment ENDMARKER .)
    ELIF            reduce using rule 19 (stmt -> fragment ENDMARKER .)
    ELSE            reduce using rule 19 (stmt -> fragment ENDMARKER .)
    TRY             reduce using rule 19 (stmt -> fragment ENDMARKER .)
    EXCEPT          reduce using rule 19 (stmt -> fragment ENDMARKER .)
    FINALLY         reduce using rule 19 (stmt -> fragment ENDMARKER .)
    WITH            reduce using rule 19 (stmt -> fragment ENDMARKER .)
    WHILE           reduce using rule 19 (stmt -> fragment ENDMARKER .)
    FOR             reduce using rule 19 (stmt -> fragment ENDMARKER .)
    $end            reduce using rule 19 (stmt -> fragment ENDMARKER .)
    DEDENT          reduce using rule 19 (stmt -> fragment ENDMARKER .)


state 49

    (18) stmt -> fragment NEWLINE .

    NEWLINE         reduce using rule 18 (stmt -> fragment NEWLINE .)
    ENDMARKER       reduce using rule 18 (stmt -> fragment NEWLINE .)
    LBRACE          reduce using rule 18 (stmt -> fragment NEWLINE .)
    RBRACE          reduce using rule 18 (stmt -> fragment NEWLINE .)
    STRING_END      reduce using rule 18 (stmt -> fragment NEWLINE .)
    STRING_CONTINUE reduce using rule 18 (stmt -> fragment NEWLINE .)
    STRING          reduce using rule 18 (stmt -> fragment NEWLINE .)
    STRING_START_TRIPLE reduce using rule 18 (stmt -> fragment NEWLINE .)
    WS              reduce using rule 18 (stmt -> fragment NEWLINE .)
    STRING_START_SINGLE reduce using rule 18 (stmt -> fragment NEWLINE .)
    NUMBER          reduce using rule 18 (stmt -> fragment NEWLINE .)
    NAME            reduce using rule 18 (stmt -> fragment NEWLINE .)
    LPAR            reduce using rule 18 (stmt -> fragment NEWLINE .)
    RPAR            reduce using rule 18 (stmt -> fragment NEWLINE .)
    LSQB            reduce using rule 18 (stmt -> fragment NEWLINE .)
    RSQB            reduce using rule 18 (stmt -> fragment NEWLINE .)
    COLON           reduce using rule 18 (stmt -> fragment NEWLINE .)
    OPERATOR        reduce using rule 18 (stmt -> fragment NEWLINE .)
    CLASS           reduce using rule 18 (stmt -> fragment NEWLINE .)
    DEF             reduce using rule 18 (stmt -> fragment NEWLINE .)
    IF              reduce using rule 18 (stmt -> fragment NEWLINE .)
    ELIF            reduce using rule 18 (stmt -> fragment NEWLINE .)
    ELSE            reduce using rule 18 (stmt -> fragment NEWLINE .)
    TRY             reduce using rule 18 (stmt -> fragment NEWLINE .)
    EXCEPT          reduce using rule 18 (stmt -> fragment NEWLINE .)
    FINALLY         reduce using rule 18 (stmt -> fragment NEWLINE .)
    WITH            reduce using rule 18 (stmt -> fragment NEWLINE .)
    WHILE           reduce using rule 18 (stmt -> fragment NEWLINE .)
    FOR             reduce using rule 18 (stmt -> fragment NEWLINE .)
    $end            reduce using rule 18 (stmt -> fragment NEWLINE .)
    DEDENT          reduce using rule 18 (stmt -> fragment NEWLINE .)


state 50

    (29) fragment -> fragment WS .

    NEWLINE         reduce using rule 29 (fragment -> fragment WS .)
    ENDMARKER       reduce using rule 29 (fragment -> fragment WS .)
    LBRACE          reduce using rule 29 (fragment -> fragment WS .)
    RBRACE          reduce using rule 29 (fragment -> fragment WS .)
    STRING_END      reduce using rule 29 (fragment -> fragment WS .)
    STRING_CONTINUE reduce using rule 29 (fragment -> fragment WS .)
    STRING          reduce using rule 29 (fragment -> fragment WS .)
    STRING_START_TRIPLE reduce using rule 29 (fragment -> fragment WS .)
    WS              reduce using rule 29 (fragment -> fragment WS .)
    STRING_START_SINGLE reduce using rule 29 (fragment -> fragment WS .)
    NUMBER          reduce using rule 29 (fragment -> fragment WS .)
    NAME            reduce using rule 29 (fragment -> fragment WS .)
    LPAR            reduce using rule 29 (fragment -> fragment WS .)
    RPAR            reduce using rule 29 (fragment -> fragment WS .)
    OPERATOR        reduce using rule 29 (fragment -> fragment WS .)
    LSQB            reduce using rule 29 (fragment -> fragment WS .)
    RSQB            reduce using rule 29 (fragment -> fragment WS .)
    COLON           reduce using rule 29 (fragment -> fragment WS .)


state 51

    (34) fragment -> fragment RPAR .

    NEWLINE         reduce using rule 34 (fragment -> fragment RPAR .)
    ENDMARKER       reduce using rule 34 (fragment -> fragment RPAR .)
    LBRACE          reduce using rule 34 (fragment -> fragment RPAR .)
    RBRACE          reduce using rule 34 (fragment -> fragment RPAR .)
    STRING_END      reduce using rule 34 (fragment -> fragment RPAR .)
    STRING_CONTINUE reduce using rule 34 (fragment -> fragment RPAR .)
    STRING          reduce using rule 34 (fragment -> fragment RPAR .)
    STRING_START_TRIPLE reduce using rule 34 (fragment -> fragment RPAR .)
    WS              reduce using rule 34 (fragment -> fragment RPAR .)
    STRING_START_SINGLE reduce using rule 34 (fragment -> fragment RPAR .)
    NUMBER          reduce using rule 34 (fragment -> fragment RPAR .)
    NAME            reduce using rule 34 (fragment -> fragment RPAR .)
    LPAR            reduce using rule 34 (fragment -> fragment RPAR .)
    RPAR            reduce using rule 34 (fragment -> fragment RPAR .)
    OPERATOR        reduce using rule 34 (fragment -> fragment RPAR .)
    LSQB            reduce using rule 34 (fragment -> fragment RPAR .)
    RSQB            reduce using rule 34 (fragment -> fragment RPAR .)
    COLON           reduce using rule 34 (fragment -> fragment RPAR .)


state 52

    (28) fragment -> fragment STRING_START_TRIPLE .

    NEWLINE         reduce using rule 28 (fragment -> fragment STRING_START_TRIPLE .)
    ENDMARKER       reduce using rule 28 (fragment -> fragment STRING_START_TRIPLE .)
    LBRACE          reduce using rule 28 (fragment -> fragment STRING_START_TRIPLE .)
    RBRACE          reduce using rule 28 (fragment -> fragment STRING_START_TRIPLE .)
    STRING_END      reduce using rule 28 (fragment -> fragment STRING_START_TRIPLE .)
    STRING_CONTINUE reduce using rule 28 (fragment -> fragment STRING_START_TRIPLE .)
    STRING          reduce using rule 28 (fragment -> fragment STRING_START_TRIPLE .)
    STRING_START_TRIPLE reduce using rule 28 (fragment -> fragment STRING_START_TRIPLE .)
    WS              reduce using rule 28 (fragment -> fragment STRING_START_TRIPLE .)
    STRING_START_SINGLE reduce using rule 28 (fragment -> fragment STRING_START_TRIPLE .)
    NUMBER          reduce using rule 28 (fragment -> fragment STRING_START_TRIPLE .)
    NAME            reduce using rule 28 (fragment -> fragment STRING_START_TRIPLE .)
    LPAR            reduce using rule 28 (fragment -> fragment STRING_START_TRIPLE .)
    RPAR            reduce using rule 28 (fragment -> fragment STRING_START_TRIPLE .)
    OPERATOR        reduce using rule 28 (fragment -> fragment STRING_START_TRIPLE .)
    LSQB            reduce using rule 28 (fragment -> fragment STRING_START_TRIPLE .)
    RSQB            reduce using rule 28 (fragment -> fragment STRING_START_TRIPLE .)
    COLON           reduce using rule 28 (fragment -> fragment STRING_START_TRIPLE .)


state 53

    (38) fragment -> fragment COLON .

    NEWLINE         reduce using rule 38 (fragment -> fragment COLON .)
    ENDMARKER       reduce using rule 38 (fragment -> fragment COLON .)
    LBRACE          reduce using rule 38 (fragment -> fragment COLON .)
    RBRACE          reduce using rule 38 (fragment -> fragment COLON .)
    STRING_END      reduce using rule 38 (fragment -> fragment COLON .)
    STRING_CONTINUE reduce using rule 38 (fragment -> fragment COLON .)
    STRING          reduce using rule 38 (fragment -> fragment COLON .)
    STRING_START_TRIPLE reduce using rule 38 (fragment -> fragment COLON .)
    WS              reduce using rule 38 (fragment -> fragment COLON .)
    STRING_START_SINGLE reduce using rule 38 (fragment -> fragment COLON .)
    NUMBER          reduce using rule 38 (fragment -> fragment COLON .)
    NAME            reduce using rule 38 (fragment -> fragment COLON .)
    LPAR            reduce using rule 38 (fragment -> fragment COLON .)
    RPAR            reduce using rule 38 (fragment -> fragment COLON .)
    OPERATOR        reduce using rule 38 (fragment -> fragment COLON .)
    LSQB            reduce using rule 38 (fragment -> fragment COLON .)
    RSQB            reduce using rule 38 (fragment -> fragment COLON .)
    COLON           reduce using rule 38 (fragment -> fragment COLON .)


state 54

    (32) fragment -> fragment NAME .

    NEWLINE         reduce using rule 32 (fragment -> fragment NAME .)
    ENDMARKER       reduce using rule 32 (fragment -> fragment NAME .)
    LBRACE          reduce using rule 32 (fragment -> fragment NAME .)
    RBRACE          reduce using rule 32 (fragment -> fragment NAME .)
    STRING_END      reduce using rule 32 (fragment -> fragment NAME .)
    STRING_CONTINUE reduce using rule 32 (fragment -> fragment NAME .)
    STRING          reduce using rule 32 (fragment -> fragment NAME .)
    STRING_START_TRIPLE reduce using rule 32 (fragment -> fragment NAME .)
    WS              reduce using rule 32 (fragment -> fragment NAME .)
    STRING_START_SINGLE reduce using rule 32 (fragment -> fragment NAME .)
    NUMBER          reduce using rule 32 (fragment -> fragment NAME .)
    NAME            reduce using rule 32 (fragment -> fragment NAME .)
    LPAR            reduce using rule 32 (fragment -> fragment NAME .)
    RPAR            reduce using rule 32 (fragment -> fragment NAME .)
    OPERATOR        reduce using rule 32 (fragment -> fragment NAME .)
    LSQB            reduce using rule 32 (fragment -> fragment NAME .)
    RSQB            reduce using rule 32 (fragment -> fragment NAME .)
    COLON           reduce using rule 32 (fragment -> fragment NAME .)


state 55

    (36) fragment -> fragment LSQB .

    NEWLINE         reduce using rule 36 (fragment -> fragment LSQB .)
    ENDMARKER       reduce using rule 36 (fragment -> fragment LSQB .)
    LBRACE          reduce using rule 36 (fragment -> fragment LSQB .)
    RBRACE          reduce using rule 36 (fragment -> fragment LSQB .)
    STRING_END      reduce using rule 36 (fragment -> fragment LSQB .)
    STRING_CONTINUE reduce using rule 36 (fragment -> fragment LSQB .)
    STRING          reduce using rule 36 (fragment -> fragment LSQB .)
    STRING_START_TRIPLE reduce using rule 36 (fragment -> fragment LSQB .)
    WS              reduce using rule 36 (fragment -> fragment LSQB .)
    STRING_START_SINGLE reduce using rule 36 (fragment -> fragment LSQB .)
    NUMBER          reduce using rule 36 (fragment -> fragment LSQB .)
    NAME            reduce using rule 36 (fragment -> fragment LSQB .)
    LPAR            reduce using rule 36 (fragment -> fragment LSQB .)
    RPAR            reduce using rule 36 (fragment -> fragment LSQB .)
    OPERATOR        reduce using rule 36 (fragment -> fragment LSQB .)
    LSQB            reduce using rule 36 (fragment -> fragment LSQB .)
    RSQB            reduce using rule 36 (fragment -> fragment LSQB .)
    COLON           reduce using rule 36 (fragment -> fragment LSQB .)


state 56

    (2) block -> block_keyword fragment COLON . NEWLINE INDENT suite DEDENT
    (3) block -> block_keyword fragment COLON . suite
    (4) block -> block_keyword fragment COLON . NEWLINE
    (38) fragment -> fragment COLON .
    (16) suite -> . stmt
    (17) suite -> . suite stmt
    (18) stmt -> . fragment NEWLINE
    (19) stmt -> . fragment ENDMARKER
    (20) stmt -> . NEWLINE
    (21) stmt -> . ENDMARKER
    (22) stmt -> . block
    (23) fragment -> . fragment LBRACE
    (24) fragment -> . fragment RBRACE
    (25) fragment -> . fragment STRING_END
    (26) fragment -> . fragment STRING_CONTINUE
    (27) fragment -> . fragment STRING
    (28) fragment -> . fragment STRING_START_TRIPLE
    (29) fragment -> . fragment WS
    (30) fragment -> . fragment STRING_START_SINGLE
    (31) fragment -> . fragment NUMBER
    (32) fragment -> . fragment NAME
    (33) fragment -> . fragment LPAR
    (34) fragment -> . fragment RPAR
    (35) fragment -> . fragment OPERATOR
    (36) fragment -> . fragment LSQB
    (37) fragment -> . fragment RSQB
    (38) fragment -> . fragment COLON
    (39) fragment -> . LBRACE
    (40) fragment -> . RBRACE
    (41) fragment -> . STRING_END
    (42) fragment -> . STRING_CONTINUE
    (43) fragment -> . STRING
    (44) fragment -> . STRING_START_TRIPLE
    (45) fragment -> . WS
    (46) fragment -> . STRING_START_SINGLE
    (47) fragment -> . NUMBER
    (48) fragment -> . NAME
    (49) fragment -> . LPAR
    (50) fragment -> . RPAR
    (51) fragment -> . LSQB
    (52) fragment -> . RSQB
    (53) fragment -> . COLON
    (54) fragment -> . OPERATOR
    (2) block -> . block_keyword fragment COLON NEWLINE INDENT suite DEDENT
    (3) block -> . block_keyword fragment COLON suite
    (4) block -> . block_keyword fragment COLON NEWLINE
    (5) block_keyword -> . CLASS
    (6) block_keyword -> . DEF
    (7) block_keyword -> . IF
    (8) block_keyword -> . ELIF
    (9) block_keyword -> . ELSE
    (10) block_keyword -> . TRY
    (11) block_keyword -> . EXCEPT
    (12) block_keyword -> . FINALLY
    (13) block_keyword -> . WITH
    (14) block_keyword -> . WHILE
    (15) block_keyword -> . FOR

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for STRING_END resolved as shift
  ! shift/reduce conflict for STRING_CONTINUE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for STRING_START_TRIPLE resolved as shift
  ! shift/reduce conflict for WS resolved as shift
  ! shift/reduce conflict for STRING_START_SINGLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for LPAR resolved as shift
  ! shift/reduce conflict for RPAR resolved as shift
  ! shift/reduce conflict for LSQB resolved as shift
  ! shift/reduce conflict for RSQB resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
    NEWLINE         shift and go to state 58
    ENDMARKER       shift and go to state 11
    LBRACE          shift and go to state 5
    RBRACE          shift and go to state 7
    STRING_END      shift and go to state 20
    STRING_CONTINUE shift and go to state 10
    STRING          shift and go to state 12
    STRING_START_TRIPLE shift and go to state 33
    WS              shift and go to state 13
    STRING_START_SINGLE shift and go to state 8
    NUMBER          shift and go to state 22
    NAME            shift and go to state 34
    LPAR            shift and go to state 2
    RPAR            shift and go to state 1
    LSQB            shift and go to state 19
    RSQB            shift and go to state 16
    COLON           shift and go to state 17
    OPERATOR        shift and go to state 29
    CLASS           shift and go to state 27
    DEF             shift and go to state 31
    IF              shift and go to state 14
    ELIF            shift and go to state 28
    ELSE            shift and go to state 21
    TRY             shift and go to state 6
    EXCEPT          shift and go to state 3
    FINALLY         shift and go to state 23
    WITH            shift and go to state 25
    WHILE           shift and go to state 35
    FOR             shift and go to state 32

  ! COLON           [ reduce using rule 38 (fragment -> fragment COLON .) ]
  ! LBRACE          [ reduce using rule 38 (fragment -> fragment COLON .) ]
  ! RBRACE          [ reduce using rule 38 (fragment -> fragment COLON .) ]
  ! STRING_END      [ reduce using rule 38 (fragment -> fragment COLON .) ]
  ! STRING_CONTINUE [ reduce using rule 38 (fragment -> fragment COLON .) ]
  ! STRING          [ reduce using rule 38 (fragment -> fragment COLON .) ]
  ! STRING_START_TRIPLE [ reduce using rule 38 (fragment -> fragment COLON .) ]
  ! WS              [ reduce using rule 38 (fragment -> fragment COLON .) ]
  ! STRING_START_SINGLE [ reduce using rule 38 (fragment -> fragment COLON .) ]
  ! NUMBER          [ reduce using rule 38 (fragment -> fragment COLON .) ]
  ! NAME            [ reduce using rule 38 (fragment -> fragment COLON .) ]
  ! LPAR            [ reduce using rule 38 (fragment -> fragment COLON .) ]
  ! RPAR            [ reduce using rule 38 (fragment -> fragment COLON .) ]
  ! OPERATOR        [ reduce using rule 38 (fragment -> fragment COLON .) ]
  ! LSQB            [ reduce using rule 38 (fragment -> fragment COLON .) ]
  ! RSQB            [ reduce using rule 38 (fragment -> fragment COLON .) ]

    suite                          shift and go to state 57
    stmt                           shift and go to state 15
    fragment                       shift and go to state 24
    block                          shift and go to state 26
    block_keyword                  shift and go to state 4

state 57

    (3) block -> block_keyword fragment COLON suite .
    (17) suite -> suite . stmt
    (18) stmt -> . fragment NEWLINE
    (19) stmt -> . fragment ENDMARKER
    (20) stmt -> . NEWLINE
    (21) stmt -> . ENDMARKER
    (22) stmt -> . block
    (23) fragment -> . fragment LBRACE
    (24) fragment -> . fragment RBRACE
    (25) fragment -> . fragment STRING_END
    (26) fragment -> . fragment STRING_CONTINUE
    (27) fragment -> . fragment STRING
    (28) fragment -> . fragment STRING_START_TRIPLE
    (29) fragment -> . fragment WS
    (30) fragment -> . fragment STRING_START_SINGLE
    (31) fragment -> . fragment NUMBER
    (32) fragment -> . fragment NAME
    (33) fragment -> . fragment LPAR
    (34) fragment -> . fragment RPAR
    (35) fragment -> . fragment OPERATOR
    (36) fragment -> . fragment LSQB
    (37) fragment -> . fragment RSQB
    (38) fragment -> . fragment COLON
    (39) fragment -> . LBRACE
    (40) fragment -> . RBRACE
    (41) fragment -> . STRING_END
    (42) fragment -> . STRING_CONTINUE
    (43) fragment -> . STRING
    (44) fragment -> . STRING_START_TRIPLE
    (45) fragment -> . WS
    (46) fragment -> . STRING_START_SINGLE
    (47) fragment -> . NUMBER
    (48) fragment -> . NAME
    (49) fragment -> . LPAR
    (50) fragment -> . RPAR
    (51) fragment -> . LSQB
    (52) fragment -> . RSQB
    (53) fragment -> . COLON
    (54) fragment -> . OPERATOR
    (2) block -> . block_keyword fragment COLON NEWLINE INDENT suite DEDENT
    (3) block -> . block_keyword fragment COLON suite
    (4) block -> . block_keyword fragment COLON NEWLINE
    (5) block_keyword -> . CLASS
    (6) block_keyword -> . DEF
    (7) block_keyword -> . IF
    (8) block_keyword -> . ELIF
    (9) block_keyword -> . ELSE
    (10) block_keyword -> . TRY
    (11) block_keyword -> . EXCEPT
    (12) block_keyword -> . FINALLY
    (13) block_keyword -> . WITH
    (14) block_keyword -> . WHILE
    (15) block_keyword -> . FOR

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for ENDMARKER resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for STRING_END resolved as shift
  ! shift/reduce conflict for STRING_CONTINUE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for STRING_START_TRIPLE resolved as shift
  ! shift/reduce conflict for WS resolved as shift
  ! shift/reduce conflict for STRING_START_SINGLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for LPAR resolved as shift
  ! shift/reduce conflict for RPAR resolved as shift
  ! shift/reduce conflict for LSQB resolved as shift
  ! shift/reduce conflict for RSQB resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for OPERATOR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for EXCEPT resolved as shift
  ! shift/reduce conflict for FINALLY resolved as shift
  ! shift/reduce conflict for WITH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    $end            reduce using rule 3 (block -> block_keyword fragment COLON suite .)
    DEDENT          reduce using rule 3 (block -> block_keyword fragment COLON suite .)
    NEWLINE         shift and go to state 30
    ENDMARKER       shift and go to state 11
    LBRACE          shift and go to state 5
    RBRACE          shift and go to state 7
    STRING_END      shift and go to state 20
    STRING_CONTINUE shift and go to state 10
    STRING          shift and go to state 12
    STRING_START_TRIPLE shift and go to state 33
    WS              shift and go to state 13
    STRING_START_SINGLE shift and go to state 8
    NUMBER          shift and go to state 22
    NAME            shift and go to state 34
    LPAR            shift and go to state 2
    RPAR            shift and go to state 1
    LSQB            shift and go to state 19
    RSQB            shift and go to state 16
    COLON           shift and go to state 17
    OPERATOR        shift and go to state 29
    CLASS           shift and go to state 27
    DEF             shift and go to state 31
    IF              shift and go to state 14
    ELIF            shift and go to state 28
    ELSE            shift and go to state 21
    TRY             shift and go to state 6
    EXCEPT          shift and go to state 3
    FINALLY         shift and go to state 23
    WITH            shift and go to state 25
    WHILE           shift and go to state 35
    FOR             shift and go to state 32

  ! NEWLINE         [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! ENDMARKER       [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! LBRACE          [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! RBRACE          [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! STRING_END      [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! STRING_CONTINUE [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! STRING          [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! STRING_START_TRIPLE [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! WS              [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! STRING_START_SINGLE [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! NUMBER          [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! NAME            [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! LPAR            [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! RPAR            [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! LSQB            [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! RSQB            [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! COLON           [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! OPERATOR        [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! CLASS           [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! DEF             [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! IF              [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! ELIF            [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! ELSE            [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! TRY             [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! EXCEPT          [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! FINALLY         [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! WITH            [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! WHILE           [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]
  ! FOR             [ reduce using rule 3 (block -> block_keyword fragment COLON suite .) ]

    stmt                           shift and go to state 37
    fragment                       shift and go to state 24
    block                          shift and go to state 26
    block_keyword                  shift and go to state 4

state 58

    (2) block -> block_keyword fragment COLON NEWLINE . INDENT suite DEDENT
    (4) block -> block_keyword fragment COLON NEWLINE .
    (20) stmt -> NEWLINE .

  ! reduce/reduce conflict for NEWLINE resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for ENDMARKER resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for STRING_END resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for STRING_CONTINUE resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for STRING resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for STRING_START_TRIPLE resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for WS resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for STRING_START_SINGLE resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for NUMBER resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for NAME resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for LPAR resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for RPAR resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for LSQB resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for RSQB resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for COLON resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for OPERATOR resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for CLASS resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for DEF resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for IF resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for ELIF resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for ELSE resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for TRY resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for EXCEPT resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for FINALLY resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for WITH resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for WHILE resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for FOR resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for $end resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
  ! reduce/reduce conflict for DEDENT resolved using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    INDENT          shift and go to state 59
    NEWLINE         reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    ENDMARKER       reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    LBRACE          reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    RBRACE          reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    STRING_END      reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    STRING_CONTINUE reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    STRING          reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    STRING_START_TRIPLE reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    WS              reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    STRING_START_SINGLE reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    NUMBER          reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    NAME            reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    LPAR            reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    RPAR            reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    LSQB            reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    RSQB            reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    COLON           reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    OPERATOR        reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    CLASS           reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    DEF             reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    IF              reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    ELIF            reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    ELSE            reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    TRY             reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    EXCEPT          reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    FINALLY         reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    WITH            reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    WHILE           reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    FOR             reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    $end            reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)
    DEDENT          reduce using rule 4 (block -> block_keyword fragment COLON NEWLINE .)

  ! NEWLINE         [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! ENDMARKER       [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! LBRACE          [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! RBRACE          [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! STRING_END      [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! STRING_CONTINUE [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! STRING          [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! STRING_START_TRIPLE [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! WS              [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! STRING_START_SINGLE [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! NUMBER          [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! NAME            [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! LPAR            [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! RPAR            [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! LSQB            [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! RSQB            [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! COLON           [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! OPERATOR        [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! CLASS           [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! DEF             [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! IF              [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! ELIF            [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! ELSE            [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! TRY             [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! EXCEPT          [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! FINALLY         [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! WITH            [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! WHILE           [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! FOR             [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! $end            [ reduce using rule 20 (stmt -> NEWLINE .) ]
  ! DEDENT          [ reduce using rule 20 (stmt -> NEWLINE .) ]


state 59

    (2) block -> block_keyword fragment COLON NEWLINE INDENT . suite DEDENT
    (16) suite -> . stmt
    (17) suite -> . suite stmt
    (18) stmt -> . fragment NEWLINE
    (19) stmt -> . fragment ENDMARKER
    (20) stmt -> . NEWLINE
    (21) stmt -> . ENDMARKER
    (22) stmt -> . block
    (23) fragment -> . fragment LBRACE
    (24) fragment -> . fragment RBRACE
    (25) fragment -> . fragment STRING_END
    (26) fragment -> . fragment STRING_CONTINUE
    (27) fragment -> . fragment STRING
    (28) fragment -> . fragment STRING_START_TRIPLE
    (29) fragment -> . fragment WS
    (30) fragment -> . fragment STRING_START_SINGLE
    (31) fragment -> . fragment NUMBER
    (32) fragment -> . fragment NAME
    (33) fragment -> . fragment LPAR
    (34) fragment -> . fragment RPAR
    (35) fragment -> . fragment OPERATOR
    (36) fragment -> . fragment LSQB
    (37) fragment -> . fragment RSQB
    (38) fragment -> . fragment COLON
    (39) fragment -> . LBRACE
    (40) fragment -> . RBRACE
    (41) fragment -> . STRING_END
    (42) fragment -> . STRING_CONTINUE
    (43) fragment -> . STRING
    (44) fragment -> . STRING_START_TRIPLE
    (45) fragment -> . WS
    (46) fragment -> . STRING_START_SINGLE
    (47) fragment -> . NUMBER
    (48) fragment -> . NAME
    (49) fragment -> . LPAR
    (50) fragment -> . RPAR
    (51) fragment -> . LSQB
    (52) fragment -> . RSQB
    (53) fragment -> . COLON
    (54) fragment -> . OPERATOR
    (2) block -> . block_keyword fragment COLON NEWLINE INDENT suite DEDENT
    (3) block -> . block_keyword fragment COLON suite
    (4) block -> . block_keyword fragment COLON NEWLINE
    (5) block_keyword -> . CLASS
    (6) block_keyword -> . DEF
    (7) block_keyword -> . IF
    (8) block_keyword -> . ELIF
    (9) block_keyword -> . ELSE
    (10) block_keyword -> . TRY
    (11) block_keyword -> . EXCEPT
    (12) block_keyword -> . FINALLY
    (13) block_keyword -> . WITH
    (14) block_keyword -> . WHILE
    (15) block_keyword -> . FOR

    NEWLINE         shift and go to state 30
    ENDMARKER       shift and go to state 11
    LBRACE          shift and go to state 5
    RBRACE          shift and go to state 7
    STRING_END      shift and go to state 20
    STRING_CONTINUE shift and go to state 10
    STRING          shift and go to state 12
    STRING_START_TRIPLE shift and go to state 33
    WS              shift and go to state 13
    STRING_START_SINGLE shift and go to state 8
    NUMBER          shift and go to state 22
    NAME            shift and go to state 34
    LPAR            shift and go to state 2
    RPAR            shift and go to state 1
    LSQB            shift and go to state 19
    RSQB            shift and go to state 16
    COLON           shift and go to state 17
    OPERATOR        shift and go to state 29
    CLASS           shift and go to state 27
    DEF             shift and go to state 31
    IF              shift and go to state 14
    ELIF            shift and go to state 28
    ELSE            shift and go to state 21
    TRY             shift and go to state 6
    EXCEPT          shift and go to state 3
    FINALLY         shift and go to state 23
    WITH            shift and go to state 25
    WHILE           shift and go to state 35
    FOR             shift and go to state 32

    suite                          shift and go to state 60
    stmt                           shift and go to state 15
    fragment                       shift and go to state 24
    block                          shift and go to state 26
    block_keyword                  shift and go to state 4

state 60

    (2) block -> block_keyword fragment COLON NEWLINE INDENT suite . DEDENT
    (17) suite -> suite . stmt
    (18) stmt -> . fragment NEWLINE
    (19) stmt -> . fragment ENDMARKER
    (20) stmt -> . NEWLINE
    (21) stmt -> . ENDMARKER
    (22) stmt -> . block
    (23) fragment -> . fragment LBRACE
    (24) fragment -> . fragment RBRACE
    (25) fragment -> . fragment STRING_END
    (26) fragment -> . fragment STRING_CONTINUE
    (27) fragment -> . fragment STRING
    (28) fragment -> . fragment STRING_START_TRIPLE
    (29) fragment -> . fragment WS
    (30) fragment -> . fragment STRING_START_SINGLE
    (31) fragment -> . fragment NUMBER
    (32) fragment -> . fragment NAME
    (33) fragment -> . fragment LPAR
    (34) fragment -> . fragment RPAR
    (35) fragment -> . fragment OPERATOR
    (36) fragment -> . fragment LSQB
    (37) fragment -> . fragment RSQB
    (38) fragment -> . fragment COLON
    (39) fragment -> . LBRACE
    (40) fragment -> . RBRACE
    (41) fragment -> . STRING_END
    (42) fragment -> . STRING_CONTINUE
    (43) fragment -> . STRING
    (44) fragment -> . STRING_START_TRIPLE
    (45) fragment -> . WS
    (46) fragment -> . STRING_START_SINGLE
    (47) fragment -> . NUMBER
    (48) fragment -> . NAME
    (49) fragment -> . LPAR
    (50) fragment -> . RPAR
    (51) fragment -> . LSQB
    (52) fragment -> . RSQB
    (53) fragment -> . COLON
    (54) fragment -> . OPERATOR
    (2) block -> . block_keyword fragment COLON NEWLINE INDENT suite DEDENT
    (3) block -> . block_keyword fragment COLON suite
    (4) block -> . block_keyword fragment COLON NEWLINE
    (5) block_keyword -> . CLASS
    (6) block_keyword -> . DEF
    (7) block_keyword -> . IF
    (8) block_keyword -> . ELIF
    (9) block_keyword -> . ELSE
    (10) block_keyword -> . TRY
    (11) block_keyword -> . EXCEPT
    (12) block_keyword -> . FINALLY
    (13) block_keyword -> . WITH
    (14) block_keyword -> . WHILE
    (15) block_keyword -> . FOR

    DEDENT          shift and go to state 61
    NEWLINE         shift and go to state 30
    ENDMARKER       shift and go to state 11
    LBRACE          shift and go to state 5
    RBRACE          shift and go to state 7
    STRING_END      shift and go to state 20
    STRING_CONTINUE shift and go to state 10
    STRING          shift and go to state 12
    STRING_START_TRIPLE shift and go to state 33
    WS              shift and go to state 13
    STRING_START_SINGLE shift and go to state 8
    NUMBER          shift and go to state 22
    NAME            shift and go to state 34
    LPAR            shift and go to state 2
    RPAR            shift and go to state 1
    LSQB            shift and go to state 19
    RSQB            shift and go to state 16
    COLON           shift and go to state 17
    OPERATOR        shift and go to state 29
    CLASS           shift and go to state 27
    DEF             shift and go to state 31
    IF              shift and go to state 14
    ELIF            shift and go to state 28
    ELSE            shift and go to state 21
    TRY             shift and go to state 6
    EXCEPT          shift and go to state 3
    FINALLY         shift and go to state 23
    WITH            shift and go to state 25
    WHILE           shift and go to state 35
    FOR             shift and go to state 32

    stmt                           shift and go to state 37
    fragment                       shift and go to state 24
    block                          shift and go to state 26
    block_keyword                  shift and go to state 4

state 61

    (2) block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .

    NEWLINE         reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    ENDMARKER       reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    LBRACE          reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    RBRACE          reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    STRING_END      reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    STRING_CONTINUE reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    STRING          reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    STRING_START_TRIPLE reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    WS              reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    STRING_START_SINGLE reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    NUMBER          reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    NAME            reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    LPAR            reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    RPAR            reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    LSQB            reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    RSQB            reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    COLON           reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    OPERATOR        reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    CLASS           reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    DEF             reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    IF              reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    ELIF            reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    ELSE            reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    TRY             reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    EXCEPT          reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    FINALLY         reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    WITH            reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    WHILE           reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    FOR             reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    $end            reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)
    DEDENT          reduce using rule 2 (block -> block_keyword fragment COLON NEWLINE INDENT suite DEDENT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACE in state 56 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 56 resolved as shift
WARNING: shift/reduce conflict for STRING_END in state 56 resolved as shift
WARNING: shift/reduce conflict for STRING_CONTINUE in state 56 resolved as shift
WARNING: shift/reduce conflict for STRING in state 56 resolved as shift
WARNING: shift/reduce conflict for STRING_START_TRIPLE in state 56 resolved as shift
WARNING: shift/reduce conflict for WS in state 56 resolved as shift
WARNING: shift/reduce conflict for STRING_START_SINGLE in state 56 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 56 resolved as shift
WARNING: shift/reduce conflict for NAME in state 56 resolved as shift
WARNING: shift/reduce conflict for LPAR in state 56 resolved as shift
WARNING: shift/reduce conflict for RPAR in state 56 resolved as shift
WARNING: shift/reduce conflict for LSQB in state 56 resolved as shift
WARNING: shift/reduce conflict for RSQB in state 56 resolved as shift
WARNING: shift/reduce conflict for COLON in state 56 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 56 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 57 resolved as shift
WARNING: shift/reduce conflict for ENDMARKER in state 57 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 57 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 57 resolved as shift
WARNING: shift/reduce conflict for STRING_END in state 57 resolved as shift
WARNING: shift/reduce conflict for STRING_CONTINUE in state 57 resolved as shift
WARNING: shift/reduce conflict for STRING in state 57 resolved as shift
WARNING: shift/reduce conflict for STRING_START_TRIPLE in state 57 resolved as shift
WARNING: shift/reduce conflict for WS in state 57 resolved as shift
WARNING: shift/reduce conflict for STRING_START_SINGLE in state 57 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 57 resolved as shift
WARNING: shift/reduce conflict for NAME in state 57 resolved as shift
WARNING: shift/reduce conflict for LPAR in state 57 resolved as shift
WARNING: shift/reduce conflict for RPAR in state 57 resolved as shift
WARNING: shift/reduce conflict for LSQB in state 57 resolved as shift
WARNING: shift/reduce conflict for RSQB in state 57 resolved as shift
WARNING: shift/reduce conflict for COLON in state 57 resolved as shift
WARNING: shift/reduce conflict for OPERATOR in state 57 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 57 resolved as shift
WARNING: shift/reduce conflict for DEF in state 57 resolved as shift
WARNING: shift/reduce conflict for IF in state 57 resolved as shift
WARNING: shift/reduce conflict for ELIF in state 57 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 57 resolved as shift
WARNING: shift/reduce conflict for TRY in state 57 resolved as shift
WARNING: shift/reduce conflict for EXCEPT in state 57 resolved as shift
WARNING: shift/reduce conflict for FINALLY in state 57 resolved as shift
WARNING: shift/reduce conflict for WITH in state 57 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 57 resolved as shift
WARNING: shift/reduce conflict for FOR in state 57 resolved as shift
WARNING: reduce/reduce conflict in state 58 resolved using rule (block -> block_keyword fragment COLON NEWLINE)
WARNING: rejected rule (stmt -> NEWLINE) in state 58
